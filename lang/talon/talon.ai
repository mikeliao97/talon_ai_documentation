tag: user.talon
### user.code_operators_math

# math operators
op (minus | subtract): actions.auto_insert(" - ")
op (plus | add): actions.auto_insert(" + ")
op (times | multiply): actions.auto_insert(" * ")
op divide: actions.auto_insert(" / ")
op mod: user.code_operator_modulo()
(op (power | exponent) | to the power [of]): user.code_operator_exponent()

# comparison operators
(op | is) equal: user.code_operator_equal()
(op | is) not equal: user.code_operator_not_equal()
(op | is) (greater | more): user.code_operator_greater_than()
(op | is) (less | below) [than]: user.code_operator_less_than()
(op | is) greater [than] or equal: user.code_operator_greater_than_or_equal_to()
(op | is) less [than] or equal: user.code_operator_less_than_or_equal_to()

# logical operators
(op | logical) and: actions.auto_insert(" and ")
(op | logical) or: actions.auto_insert(" or ")

# set operators
(op | is) in: user.code_operator_in()
(op | is) not in: user.code_operator_not_in()

# TODO: This operator should either be abstracted into a function or removed.
(op | pad) colon: " : "
### user.code_operators_assignment
tag(): user.code_operators_math
tag(): user.code_operators_bitwise

# assignment
op (equals | assign): actions.auto_insert(" = ")

# combined computation and assignment
op (minus | subtract) equals: user.code_operator_subtraction_assignment()
op (plus | add) equals: user.code_operator_addition_assignment()
op (times | multiply) equals: user.code_operator_multiplication_assignment()
op divide equals: user.code_operator_division_assignment()
op mod equals: user.code_operator_modulo_assignment()
[op] increment: user.code_operator_increment()

#bitwise operators
[op] bit [wise] and equals: user.code_operator_bitwise_and_assignment()
[op] bit [wise] or equals: user.code_operator_bitwise_or_assignment()
(op | logical | bitwise) (ex | exclusive) or equals:
    user.code_operator_bitwise_exclusive_or_assignment()
[(op | logical | bitwise)] (left shift | shift left) equals:
    user.code_operator_bitwise_left_shift_assignment()
[(op | logical | bitwise)] (right shift | shift right) equals:
    user.code_operator_bitwise_right_shift_assignment()
### user.code_comment_line
comment: actions.auto_insert("#")
comment line:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    edit.line_start()
    actions.auto_insert("#")
#adds comment to the start of the line
comment line <user.text> over:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    edit.line_start()
    actions.auto_insert("#")
    insert(user.text)
    insert(" ")
comment <user.text> over:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    actions.auto_insert("#")
    insert(user.text)
comment <user.text>$:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    actions.auto_insert("#")
    insert(user.text)
(line | inline) comment <user.text> over:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    edit.line_end()
    actions.auto_insert("#")
    insert(user.text)
(line | inline) comment <user.text>$:
    #todo: this should probably be a single function once
    #.talon supports implementing actions with parameters?
    edit.line_end()
    actions.auto_insert("#")
    insert(user.text)
### user.code_functions_common
toggle funk: user.code_toggle_functions()
funk <user.code_common_function>: text += f"({selection or ''})"
        actions.user.paste(text)
        actions.edit.left()
funk cell <number>: user.code_select_function(number - 1, "")
funk wrap <user.code_common_function>:
    text += f"({selection or ''})"
        actions.user.paste(text)
        actions.edit.left())
funk wrap <number>: user.code_select_function(number - 1, edit.selected_text())
# uncomment user.talon_populate_lists tag to activate talon-specific lists of actions, scopes, modes etcetera.
# Do not enable this tag with dragon, as it will be unusable.
# with conformer, the latency increase may also be unacceptable depending on your cpu
# see https://github.com/knausj85/knausj_talon/issues/600

dot talon: insert(".talon")
#defintion blocks for the context
action block: user.insert_between("action(", "):")
setting block: insert("settings():\n\t")
setting {user.talon_settings}: user.paste("{talon_settings} = ")
#context requirements
win require: insert("os: windows\n")
mac require: insert("os: mac\n")
linux require: insert("os: linux\n")
title require: insert("win.title: ")
application [require] [{user.talon_apps}]:
    app = talon_apps or ""
    user.paste("app: {app}")
mode require [{user.talon_modes}]:
    mode = talon_modes or ""
    user.paste("mode: {mode}")
tag require [{user.talon_tags}]:
    tag = talon_tags or ""
    user.paste("tag: {tag}")
tag set [{user.talon_tags}]:
    tag = talon_tags or ""
host require:
    hostname = user.talon_get_hostname()
    user.paste("hostname: {hostname}\n")
# requires user.talon_populate_lists tag. do not use with dragon
list {user.talon_lists}: "{{{talon_lists}}}"
# requires user.talon_populate_lists tag. do not use with dragon
capture {user.talon_captures}: "<{talon_captures}>"

#commands for dictating key combos
key <user.keys> over: "{keys}"
key <user.modifiers> over: "{modifiers}"

# all actions (requires uncommenting user.talon_populate_lists tag above)
funk {user.talon_actions}:
    text += f"({selection or ''})"
        actions.user.paste(text)
        actions.edit.left())
funk cell <number>: user.code_select_function(number - 1, "")
funk wrap <user.code_common_function>:
    text += f"({selection or ''})"
        actions.user.paste(text)
        actions.edit.left())
funk wrap <number>: user.code_select_function(number - 1, edit.selected_text())
