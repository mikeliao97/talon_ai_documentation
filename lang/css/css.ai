"""
 This is a talon voice file containing commands for CSS development. It includes commands for inserting various CSS functions, mathematical and logical operators, and global CSS values. The file also includes lists of CSS units, at-rules, and global values for reference. The commands can be activated through voice commands and can perform tasks such as adding code blocks, inserting various operators, and importing CSS files.
"""tag: user.css
### user.code_functions_common
toggle funk: user.code_toggle_functions()
funk <user.code_common_function>: user.code_insert_function(code_common_function, "")
funk cell <number>: user.code_select_function(number - 1, "")
funk wrap <user.code_common_function>:
    user.code_insert_function(code_common_function, edit.selected_text())
funk wrap <number>: user.code_select_function(number - 1, edit.selected_text())
### user.code_libraries
state import: user.code_import()
### user.code_operators_math

# math operators
op (minus | subtract): user.code_operator_subtraction()
op (plus | add): user.code_operator_addition()
op (times | multiply): user.code_operator_multiplication()
op divide: user.code_operator_division()
op mod: user.code_operator_modulo()
(op (power | exponent) | to the power [of]): user.code_operator_exponent()

# comparison operators
(op | is) equal: user.code_operator_equal()
(op | is) not equal: user.code_operator_not_equal()
(op | is) (greater | more): user.code_operator_greater_than()
(op | is) (less | below) [than]: user.code_operator_less_than()
(op | is) greater [than] or equal: user.code_operator_greater_than_or_equal_to()
(op | is) less [than] or equal: user.code_operator_less_than_or_equal_to()

# logical operators
(op | logical) and: user.code_operator_and()
(op | logical) or: user.code_operator_or()

# set operators
(op | is) in: user.code_operator_in()
(op | is) not in: user.code_operator_not_in()

# TODO: This operator should either be abstracted into a function or removed.
(op | pad) colon: " : "

settings():
    user.code_public_variable_formatter = "DASH_SEPARATED"

block: user.code_block()

attribute [<user.text>]:
    name = user.formatted_text(text or "", "DASH_SEPARATED")
    user.insert_between("[{name}", "]")

prop <user.text>:
    name = user.formatted_text(text, "DASH_SEPARATED")
    user.insert_between("{name}: ", ";")

# for media/supports queries, or if you don't like prop
rule <user.text>:
    name = user.formatted_text(text, "DASH_SEPARATED")
    insert("{name}: ")

value <user.number_string> [{user.css_unit}]: "{number_string}{css_unit or ''}"
value <user.number_string> point <digit_string> [{user.css_unit}]:
    "{number_string}.{digit_string}{css_unit or ''}"

(value | state) {user.css_global_value}: "{css_global_value}"
value <user.text>: user.insert_formatted(text, "DASH_SEPARATED")

variable <user.text>:
    name = user.formatted_text(text, "DASH_SEPARATED")
    insert("var(--{name})")

op var: user.insert_between("var(--", ")")

at {user.css_at_rule}: "@{css_at_rule} "
unit {user.css_unit}: insert(css_unit)

[value] current color: "currentColor"
op important: " !important"
