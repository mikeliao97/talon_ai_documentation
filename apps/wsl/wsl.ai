"""
 This file provides instructions for activating voice commands in the talon system and describes what each command does. The file includes commands for navigating directories and files, creating folders, showing properties, and opening terminals, among other things. The file also describes how to set up the system to recognize different contexts and how to monitor registry updates for installed WSL (Windows Subsystem for Linux) distros.
"""# NOTE: to use these commands you will need to activate the tag below in whatever contexts you
# choose.
#
# do this in a separate .talon file or via python. for example, if you use windows terminal for
# wsl then you might do this:
#
#    os: windows
#    app: windows_terminal
#    -
### user.wsl
# NOTE: to use these commands you will need to activate the tag below in whatever contexts you
# choose.
#
# do this in a separate .talon file or via python. for example, if you use windows terminal for
# wsl then you might do this:
#
#    os: windows
#    app: windows_terminal
#    -
#    tag(): user.wsl
#
# however, if you also use windows terminal for other things (powershell), you will want something
# more specific...like this:
#
#    os: windows
#    app: windows_terminal
#    title: /^WSL:/
#    -
#    tag(): user.wsl
#
# then, you will need to find a way to set the window title accordingly. for example, to match
# the title pattern above, you can set the prompt in your .bashrc file like this:
#
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME} \u@\h: \w\a\]$PS1"
#
# ALSO: if you do populate your window title with your distro name, make sure the 'wsl_title_regex'
# value in wsl.py is set accordingly.

tag(): terminal
tag(): user.file_manager
tag(): user.generic_unix_shell
tag(): user.git
tag(): user.kubectl

^go <user.letter>$: actions.actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")

(wsl | weasel) reset path detection: user.wsl_reset_path_detection()
(wsl | weasel) speak: user.wsl_speak()
#
# however, if you also use windows terminal for other things (powershell), you will want something
# more specific...like this:
#
#    os: windows
#    app: windows_terminal
#    title: /^WSL:/
#    -
### user.wsl
# NOTE: to use these commands you will need to activate the tag below in whatever contexts you
# choose.
#
# do this in a separate .talon file or via python. for example, if you use windows terminal for
# wsl then you might do this:
#
#    os: windows
#    app: windows_terminal
#    -
#    tag(): user.wsl
#
# however, if you also use windows terminal for other things (powershell), you will want something
# more specific...like this:
#
#    os: windows
#    app: windows_terminal
#    title: /^WSL:/
#    -
#    tag(): user.wsl
#
# then, you will need to find a way to set the window title accordingly. for example, to match
# the title pattern above, you can set the prompt in your .bashrc file like this:
#
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME} \u@\h: \w\a\]$PS1"
#
# ALSO: if you do populate your window title with your distro name, make sure the 'wsl_title_regex'
# value in wsl.py is set accordingly.

tag(): terminal
tag(): user.file_manager
tag(): user.generic_unix_shell
tag(): user.git
tag(): user.kubectl

^go <user.letter>$: actions.actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")

(wsl | weasel) reset path detection: user.wsl_reset_path_detection()
(wsl | weasel) speak: user.wsl_speak()
#
# then, you will need to find a way to set the window title accordingly. for example, to match
# the title pattern above, you can set the prompt in your .bashrc file like this:
#
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME} \u@\h: \w\a\]$PS1"
#
# ALSO: if you do populate your window title with your distro name, make sure the 'wsl_title_regex'
# value in wsl.py is set accordingly.
tag: user.wsl

### terminal
os: linux
and tag: user.taskwarrior
# general
task version: "task --version\n"
task commands: "task commands\n"
task help: "task help\n"

# task list
task list: "task list\n"
task list orphans: "task project: list\n"
task list untagged: "task tags.none: list\n"
task list <user.text>: "task list {text}\n"
task list project: "task list project: "
task list project <user.text>: "task list project:{text}\n"

# task add
task add: "task add "
task add <user.text>: "task add {text}\n"
task undo: "task undo\n"

(tasks | task next): "task next\n"

# task editing
task <number> edit$: "task {number} edit"

# task completion
task <number> done$: "task {number} done"
task <number> delete$: "task {number} delete"
### user.file_manager
title force: actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")
manager show: user.file_manager_toggle_pickers()
manager close: user.file_manager_hide_pickers()
manager refresh: user.file_manager_update_lists()
go <user.system_path>: actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")
go back: user.file_manager_go_back()
go forward: user.file_manager_go_forward()
(go parent | daddy): actions.insert("cd ..")
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")
^follow numb <number_small>$:
    directory = user.file_manager_get_directory_by_index(number_small - 1)
    actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")
^follow {user.file_manager_directories}$:
    actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")
^(select | cell) folder {user.file_manager_directories}$:
    actions.insert(f'"{path}"')
^open <number_small>$:
    file = user.file_manager_get_file_by_index(number_small - 1)
    actions.insert(path)
        # actions.key("enter")
^folder numb <number_small>$:
    directory = user.file_manager_get_directory_by_index(number_small - 1)
    actions.insert(f'"{path}"')
^file numb <number_small>$:
    file = user.file_manager_get_file_by_index(number_small - 1)
    actions.insert(path)
^file {user.file_manager_files}$: actions.insert(path)
^(select | cell) file {user.file_manager_files}$:
    actions.insert(path)

#new folder
folder new <user.text>: actions.insert(f'mkdir "{name}"')

#show properties
properties show: #     
    #     actions.key("alt-enter")

# open terminal at location
terminal here: #     actions.key("ctrl-l")
    #     actions.insert("cmd.exe")
    #     actions.key("enter")

    #

folder next: user.file_manager_next_folder_page()
folder last: user.file_manager_previous_folder_page()

file next: user.file_manager_next_file_page()
file last: user.file_manager_previous_file_page()

^go <user.letter>$: actions.actions.insert(f'cd "{path}"')
        actions.key("enter")
        actions.actions.insert("title Command Prompt: %CD%")
        actions.key("enter")
        # action(user.file_manager_go_back):
        #    key("alt-left")
        # action(user.file_manager_go_forward):
        #    key("alt-right")

(wsl | weasel) reset path detection: user.wsl_reset_path_detection()
(wsl | weasel) speak: user.wsl_speak()
