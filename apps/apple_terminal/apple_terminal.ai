"""
 This is a voice file for Talon which allows users to activate commands in the Apple Terminal. The file includes commands for different tasks including listing tasks, adding tasks, editing tasks, and completing tasks. There are also commands for navigating and manipulating files in the user's file system. The file also includes functions for tab management and opening Terminal at a certain location. The file is activated through the Talon application and is specific to the Apple Terminal on a Linux operating system.
"""app: apple_terminal
# makes the commands in terminal.talon available
### terminal
os: linux
and tag: user.taskwarrior
# general
task version: "task --version\n"
task commands: "task commands\n"
task help: "task help\n"

# task list
task list: "task list\n"
task list orphans: "task project: list\n"
task list untagged: "task tags.none: list\n"
task list <user.text>: "task list {text}\n"
task list project: "task list project: "
task list project <user.text>: "task list project:{text}\n"

# task add
task add: "task add "
task add <user.text>: "task add {text}\n"
task undo: "task undo\n"

(tasks | task next): "task next\n"

# task editing
task <number> edit$: "task {number} edit"

# task completion
task <number> done$: "task {number} done"
task <number> delete$: "task {number} delete"

# use readline keybindings for various editing commands

# activates the implementation of the commands/functions in terminal.talon

# makes commands for certain applications available
# you can deactivate them if you do not use the application

# TODO: explain
### user.tabs
tab (open | new): app.tab_open()
tab (last | previous): app.tab_previous()
tab next: app.tab_next()
tab close: user.tab_close_wrapper()
tab (reopen | restore): app.tab_reopen()
go tab <number>: user.tab_jump(number)
go tab final: user.tab_final()
tab duplicate: user.tab_duplicate()
### user.file_manager
title force: return


@ctx.action_class("app")
class app_actions:
    # other tab functions should already be implemented in
    # code/platforms/mac/app.py
manager show: user.file_manager_toggle_pickers()
manager close: user.file_manager_hide_pickers()
manager refresh: user.file_manager_update_lists()
go <user.system_path>: actions.insert("cd ")
        path = f'"{path}"'
        actions.insert(path)
        actions.key("enter")

        # jtk - refresh title isn't necessary since the apple terminal does it for us
        # actions.return


@ctx.action_class("app")
class app_actions:
    # other tab functions should already be implemented in
    # code/platforms/mac/app.py
go back: user.file_manager_go_back()
go forward: user.file_manager_go_forward()
(go parent | daddy): actions.insert("cd ..")
        actions.key("enter")
^follow numb <number_small>$:
    directory = user.file_manager_get_directory_by_index(number_small - 1)
    actions.insert("cd ")
        path = f'"{path}"'
        actions.insert(path)
        actions.key("enter")

        # jtk - refresh title isn't necessary since the apple terminal does it for us
        # actions.return


@ctx.action_class("app")
class app_actions:
    # other tab functions should already be implemented in
    # code/platforms/mac/app.py
^follow {user.file_manager_directories}$:
    actions.insert("cd ")
        path = f'"{path}"'
        actions.insert(path)
        actions.key("enter")

        # jtk - refresh title isn't necessary since the apple terminal does it for us
        # actions.return


@ctx.action_class("app")
class app_actions:
    # other tab functions should already be implemented in
    # code/platforms/mac/app.py
^(select | cell) folder {user.file_manager_directories}$:
    actions.insert(path)
^open <number_small>$:
    file = user.file_manager_get_file_by_index(number_small - 1)
    actions.insert(path)
        actions.key("enter")
^folder numb <number_small>$:
    directory = user.file_manager_get_directory_by_index(number_small - 1)
    actions.insert(path)
^file numb <number_small>$:
    file = user.file_manager_get_file_by_index(number_small - 1)
    actions.insert(path)
^file {user.file_manager_files}$: actions.insert(path)
^(select | cell) file {user.file_manager_files}$:
    actions.insert(path)

#new folder
folder new <user.text>: name = f'"{name}"'

        actions.insert("mkdir " + name)

#show properties
properties show: user.file_manager_show_properties()

# open terminal at location
terminal here: user.file_manager_terminal_here()

folder next: user.file_manager_next_folder_page()
folder last: user.file_manager_previous_folder_page()

file next: user.file_manager_next_file_page()
file last: user.file_manager_previous_file_page()

suspend: key(ctrl-z)
resume:
    insert("fg")
    key(enter)
