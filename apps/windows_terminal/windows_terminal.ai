"""
 This is a talon voice file that activates commands in the Windows Terminal app. The file includes commands for tasks such as task version, task list, and task editing, as well as commands for working with tabs and splits. The file also includes actions for copying and pasting, finding text, and opening files and directories in a file manager. The user is able to customize which directories are remapped or excluded and can create new folders in a gui file manager or with a terminal command. Some commands have limitations due to default configurations, such as split navigation and flipping in the Windows Terminal app.
"""app: windows_terminal
# makes the commands in terminal.talon available
### terminal
os: linux
and tag: user.taskwarrior
# general
task version: "task --version\n"
task commands: "task commands\n"
task help: "task help\n"

# task list
task list: "task list\n"
task list orphans: "task project: list\n"
task list untagged: "task tags.none: list\n"
task list <user.text>: "task list {text}\n"
task list project: "task list project: "
task list project <user.text>: "task list project:{text}\n"

# task add
task add: "task add "
task add <user.text>: "task add {text}\n"
task undo: "task undo\n"

(tasks | task next): "task next\n"

# task editing
task <number> edit$: "task {number} edit"

# task completion
task <number> done$: "task {number} done"
task <number> delete$: "task {number} delete"

# activates the implementation of the commands/functions in terminal.talon

# makes commands for certain applications available
# you can deactivate them if you do not use the application

### user.tabs
tab (open | new): app.tab_open()
tab (last | previous): app.tab_previous()
tab next: app.tab_next()
tab close: user.tab_close_wrapper()
tab (reopen | restore): app.tab_reopen()
go tab <number>: user.tab_jump(number)
go tab final: user.tab_final()
tab duplicate: user.tab_duplicate()
# TODO: file_manager
### user.splits
split right: user.split_window_right()
split left: user.split_window_left()
split down: user.split_window_down()
split up: user.split_window_up()
split (vertically | vertical): user.split_window_vertically()
split (horizontally | horizontal): user.split_window_horizontally()
split flip: user.split_flip()
split max: user.split_maximize()
split reset: user.split_reset()
split window: user.split_window()
split clear: user.split_clear()
split clear all: user.split_clear_all()
split next: user.split_next()
split last: user.split_last()
go split <number>: user.split_number(number)

settings open: key(ctrl-,)
focus left: key(ctrl-alt-shift-left)
focus right: key(ctrl-alt-shift-right)
focus up: key(ctrl-alt-shift-up)
focus down: key(ctrl-alt-shift-down)
term menu: key(ctrl-shift-f1)

find it: edit.find()

find it <phrase>$:
    # handle consecutive finds by first escaping out of any previous one
    key(escape)
    # make it so
    edit.find("{phrase}\n")
