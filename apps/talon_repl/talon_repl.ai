"""
 This is a voice file for the talon software. It includes commands for window titles, testing, debugging, and populating lists. The commands are activated by specific phrases and insert specific strings of code when activated, such as "sim('{phrase}')". Some of the commands require the "user.talon_populate_lists" tag to be enabled, while others should not be used with Dragon. The file also includes a variety of debugging and informational commands related to actions, scopes, modes, settings, running apps, and windows.
"""win.title: /repl/
win.title: /Talon - REPL/

# uncomment user.talon_populate_lists tag to activate talon-specific lists of actions, scopes, modes etcetera.
# Do not enable this tag with dragon, as it will be unusable.
# with conformer, the latency increase may also be unacceptable depending on your cpu
# see https://github.com/knausj85/knausj_talon/issues/600

^test last$:
    phrase = user.history_get(1)
    command = "sim('{phrase}')"
    insert(command)
    key(enter)
^test <phrase>$:
    insert("sim('{phrase}')")
    key(enter)
^test numb <number_small>$:
    phrase = user.history_get(number_small)
    command = "sim('{phrase}')"
    #to do: shouldn't this work?
    #user.paste("sim({phrase})")
    insert(command)
    key(enter)
# requires user.talon_populate_lists tag. do not use with dragon
^debug action {user.talon_actions}$:
    insert("actions.find('{user.talon_actions}')")
    key(enter)
# requires user.talon_populate_lists tag. do not use with dragon
^debug list {user.talon_lists}$:
    insert("actions.user.talon_pretty_print(registry.lists['{talon_lists}'])")
    key(enter)
^debug tags$:
    insert("actions.user.talon_pretty_print(registry.tags)")
    key(enter)
^debug settings$:
    insert("actions.user.talon_pretty_print(registry.settings)")
    key(enter)
^debug modes$:
    insert("actions.user.talon_pretty_print(scope.get('mode'))")
    key(enter)
# requires user.talon_populate_lists tag. do not use with dragon
^debug scope {user.talon_scopes}$:
    insert("actions.user.talon_pretty_print(scope.get('{talon_scopes}'))")
    key(enter)
^debug running apps$:
    insert("actions.user.talon_pretty_print(ui.apps(background=False))")
    key(enter)
^debug all windows$:
    insert("actions.user.talon_pretty_print(ui.windows())")
    key(enter)
^debug {user.running} windows$:
    insert("actions.user.talon_debug_app_windows('{running}')")
    key(enter)
