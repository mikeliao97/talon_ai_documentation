{
    "tag: header_name": {},
    "app: header_name": {},
    "tag: auto_lang": {},
    "tag: mouse_grid_showing": {},
    "tag: help_scope_open": {},
    "tag: help_open": {},
    "tag: draft_editor_active": {},
    "tag: draft_window_showing": {},
    "tag: snippets": {},
    "tag: snippets_showing": {},
    "tag: find_and_replace": {},
    "tag: chapters": {},
    "tag: emoji": {},
    "tag: user.readline": {
        "delete_line": "actions.edit.line_end()\n        actions.key(\"ctrl-u\")",
        "word_left": "actions.key(\"alt-b\")",
        "word_right": "actions.key(\"alt-f\")",
        "line_end": "actions.key(\"ctrl-e\")",
        "line_start": "actions.key(\"ctrl-a\")",
        "undo": "actions.key(\"ctrl-_\")\n\n    # TODO: we don't want to overwrite the system's paste action, should this be a separate command?\n    #",
        "paste": "#     actions.key(\"ctrl-y\")\n\n\n@ctx.action_class(\"user\")\nclass Actions:",
        "cut_line": "actions.edit.line_start()\n        actions.key(\"ctrl-k\")",
        "cut_word_left": "actions.key(\"ctrl-w\")",
        "cut_word_right": "actions.key(\"alt-d\")",
        "copy_word_left": "actions.user.cut_word_left()\n        actions.key(\"ctrl-y\")",
        "copy_word_right": "# TODO: how put cursor back at starting position?\n        actions.user.cut_word_right()\n        actions.key(\"ctrl-y\")\n\n    # TODO: not sure how to implement these\n    #",
        "cut_word": "#     pass\n    #",
        "copy_word": "#     pass\n    #",
        "delete_word": "#     pass\n\n    # TODO: not sure how to implement these without overwriting clipboard\n    #",
        "delete_word_left": "#     actions.user.cut_word_left()\n    #",
        "delete_word_right": "#     actions.user.cut_word_right()"
    },
    "tag: user.generic_unix_shell": {
        "terminal_list_directories": "actions.insert(\"ls\")\n        actions.key(\"enter\")",
        "terminal_list_all_directories": "actions.insert(\"ls -a\")\n        actions.key(\"enter\")",
        "terminal_change_directory": "actions.insert(f\"cd {path}\")\n        if path:\n            actions.key(\"enter\")",
        "terminal_change_directory_root": "actions.insert(\"cd /\")\n        actions.key(\"enter\")",
        "terminal_clear_screen": "actions.insert(\"clear\")\n        actions.key(\"enter\")",
        "terminal_run_last": "actions.key(\"up enter\")",
        "terminal_rerun_search": "actions.key(\"ctrl-r\")\n        actions.insert(command)",
        "terminal_kill_all": "actions.key(\"ctrl-c\")\n        actions.insert(\"y\")\n        actions.key(\"enter\")"
    },
    "tag: user.generic_windows_shell": {
        "terminal_list_directories": "actions.insert(\"ls\")\n        actions.key(\"enter\")",
        "terminal_list_all_directories": "actions.insert(\"ls -force\")\n        actions.key(\"enter\")",
        "terminal_change_directory": "actions.insert(f\"cd {path}\")\n        if path:\n            actions.key(\"enter\")",
        "terminal_change_directory_root": "actions.insert(\"cd /\")\n        actions.key(\"enter\")",
        "terminal_clear_screen": "actions.insert(\"clear\")\n        actions.key(\"enter\")",
        "terminal_run_last": "actions.key(\"up enter\")",
        "terminal_rerun_search": "actions.key(\"ctrl-r\")\n        actions.insert(command)",
        "terminal_kill_all": "actions.key(\"ctrl-c\")\n        actions.insert(\"y\")\n        actions.key(\"enter\")"
    },
    "tag: browser": {
        "firefox_bookmarks_sidebar": "actions.key(\"cmd-b\")",
        "firefox_history_sidebar": "actions.key(\"cmd-shift-h\")\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "bookmarks": "actions.key(\"cmd-shift-o\")",
        "open_private_window": "actions.key(\"cmd-shift-p\")",
        "show_downloads": "actions.key(\"cmd-j\")",
        "show_extensions": "actions.key(\"cmd-shift-a\")",
        "discord_toggle_dms": "@ctx.action_class(\"user\")\nclass UserActions:\n    # Navigation: Channels",
        "messaging_open_channel_picker": "actions.user.discord_quick_switcher(\"#\", \"\")",
        "line_insert_down": "actions.edit.line_end()\n        actions.key(\"shift-enter\")"
    },
    "tag: file_manager": {},
    "tag: debugger": {},
    "tag: multiple_cursors": {},
    "tag: pages": {},
    "tag: messaging": {},
    "tag: splits": {},
    "tag: user.terraform": {
        "code_terraform_data_source": "result = f\"data \\\"{actions.user.formatted_text(text, 'SNAKE_CASE')}\\\" \\\"\\\"\"\n\n        actions.insert(result)\n        actions.key(\"left\")",
        "code_terraform_module_block": "actions.user.insert_between(text + ' \"', '\"')",
        "code_terraform_resource": "result = f\"resource \\\"{actions.user.formatted_text(text, 'SNAKE_CASE')}\\\" \\\"\\\"\"\n\n        actions.insert(result)\n        actions.key(\"left\")",
        "code_operator_assignment": "actions.insert(\" = \")",
        "code_operator_subtraction": "actions.insert(\" - \")",
        "code_operator_addition": "actions.insert(\" + \")",
        "code_operator_multiplication": "actions.insert(\" * \")",
        "code_operator_division": "actions.insert(\" / \")",
        "code_operator_modulo": "actions.insert(\" % \")",
        "code_operator_equal": "actions.insert(\" == \")",
        "code_operator_not_equal": "actions.insert(\" != \")",
        "code_operator_greater_than": "actions.insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.insert(\" >= \")",
        "code_operator_less_than": "actions.insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.insert(\" <= \")",
        "code_operator_and": "actions.insert(\" && \")",
        "code_operator_or": "actions.insert(\" || \")",
        "code_insert_true": "actions.insert(\"true\")",
        "code_insert_false": "actions.insert(\"false\")",
        "code_operator_lambda": "actions.insert(\" => \")",
        "code_insert_null": "actions.insert(\"null\")",
        "code_insert_is_null": "actions.insert(\" == null\")",
        "code_insert_is_not_null": "actions.insert(\" != null\")",
        "code_comment_line_prefix": "actions.insert(\"# \")",
        "code_state_for": "actions.user.insert_between(\"for \", \" in\")"
    },
    "tag: talon_python": {},
    "tag: user.talon": {
        "on_update_decls": "# todo modes?\n    for thing in [\n        \"actions\",\n        \"lists\",\n        \"captures\",\n        \"tags\",\n        \"apps\",\n        \"settings\",\n        \"scopes\",\n        \"modes\",\n    ]:\n        l = getattr(decls, thing)\n        ctx_talon_lists.lists[\n            f\"user.talon_{thing}\"\n        ] = actions.user.create_spoken_forms_from_list(\n            l.keys(), generate_subsequences=False\n        )\n        # print(\n        #     \"List: {} \\n {}\".format(thing, str(ctx_talon_lists.lists[f\"user.talon_{thing}\"]))\n        # )",
        "on_ready": "# print(\"on_ready\")\n    on_update_decls(registry.decls)\n    registry.register(\"update_decls\", on_update_decls)\n\n\napp.register(\"ready\", on_ready)\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "code_operator_and": "actions.auto_insert(\" and \")",
        "code_operator_or": "actions.auto_insert(\" or \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_comment_line_prefix": "actions.auto_insert(\"#\")",
        "code_insert_function": "text += f\"({selection or ''})\"\n        actions.user.paste(text)\n        actions.edit.left()"
    },
    "tag: user.vimscript": {
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_comment_line_prefix": "actions.auto_insert('\"')",
        "code_state_if": "actions.insert(\"if \")",
        "code_state_else_if": "actions.insert(\"elseif \")",
        "code_state_else": "actions.insert(\"else\")",
        "code_private_function": "actions.auto_insert(\"function \")",
        "code_protected_function": "actions.auto_insert(\"function \")",
        "code_public_function": "actions.auto_insert(\"function \")"
    },
    "tag: user.protobuf": {},
    "tag: user.python": {
        "update_list": "#     ctx.lists[\"user.snippets\"] = watch_list\n\n\n# # there's probably a way to do this without\n# snippet_path = None\n# if app.platform == \"windows\":\n#     snippet_path = os.path.expandvars(r\"%AppData%\\Code\\User\\snippets\")\n# elif app.platform == \"mac\":\n#     snippet_path = os.path.expanduser(\n#         \"~/Library/Application Support/Code/User/snippets\"\n#     )\n# if snippet_path:\n#     watcher = snippet_watcher({snippet_path: [\"python.json\",],}, update_list,)"
    },
    "tag: user.typescript": {
        "code_private_function": "result = \"private function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)",
        "code_protected_function": "result = \"protected function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_protected_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)",
        "code_public_function": "result = \"public function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)",
        "code_insert_type_annotation": "actions.insert(f\": {type}\")",
        "code_insert_return_type": "actions.insert(f\": {type}\")"
    },
    "tag: user.rust": {
        "code_comment_documentation_block_inner": "actions.user.insert_between(\"/*!\", \"*/\")\n        actions.key(\"enter\")",
        "code_comment_line_prefix": "actions.auto_insert(\"// \")\n\n    # tag: comment_documentation",
        "code_comment_documentation": "actions.auto_insert(\"/// \")\n\n    # tag: imperative",
        "code_block": "actions.auto_insert(\"{}\")\n        actions.edit.left()\n        actions.key(\"enter\")",
        "code_state_if": "actions.auto_insert(\"if \")",
        "code_state_else_if": "actions.auto_insert(\" else if \")",
        "code_state_else": "actions.user.insert_between(\" else { \", \" }\")",
        "code_state_switch": "actions.auto_insert(\"match \")",
        "code_state_for": "actions.auto_insert(\"for  in  {}\")\n        actions.edit.left()\n        actions.key(\"enter\")\n        actions.edit.up()\n        actions.edit.line_end()\n        repeat_call(6, actions.edit.left)",
        "code_state_while": "actions.auto_insert(\"while  {}\")\n        actions.edit.left()\n        actions.key(\"enter\")\n        actions.edit.up()\n        actions.edit.line_end()\n        repeat_call(2, actions.edit.left)",
        "code_state_infinite_loop": "actions.user.insert_between(\"loop {\", \"}\")\n        actions.key(\"enter\")",
        "code_state_return": "actions.auto_insert(\"return \")",
        "code_break": "actions.auto_insert(\"break;\")",
        "code_next": "actions.auto_insert(\"continue;\")\n\n    # tag: object_oriented",
        "code_operator_object_accessor": "actions.auto_insert(\".\")",
        "code_self": "actions.auto_insert(\"self\")",
        "code_define_class": "actions.auto_insert(\"struct \")\n\n    # tag: data_bool",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")\n\n    # tag: data_null",
        "code_insert_null": "actions.auto_insert(\"None\")",
        "code_insert_is_null": "actions.auto_insert(\".is_none()\")",
        "code_insert_is_not_null": "actions.auto_insert(\".is_some()\")\n\n    # tag: functions",
        "code_default_function": "actions.user.code_private_function(text)",
        "code_private_function": "actions.auto_insert(\"fn \")\n        formatter = settings.get(\"user.code_private_function_formatter\")\n        function_name = actions.user.formatted_text(text, formatter)\n        actions.user.code_insert_function(function_name, None)",
        "code_protected_function": "actions.auto_insert(\"pub(crate) fn \")\n        formatter = settings.get(\"user.code_protected_function_formatter\")\n        function_name = actions.user.formatted_text(text, formatter)\n        actions.user.code_insert_function(function_name, None)",
        "code_public_function": "actions.auto_insert(\"pub fn \")\n        formatter = settings.get(\"user.code_public_function_formatter\")\n        function_name = actions.user.formatted_text(text, formatter)\n        actions.user.code_insert_function(function_name, None)",
        "code_insert_type_annotation": "actions.auto_insert(f\": {type}\")",
        "code_insert_return_type": "actions.auto_insert(f\" -> {type}\")\n\n    # tag: functions_gui",
        "code_insert_function": "code_insert_function_or_macro(text, selection, \"(\", \")\")\n\n    # tag: libraries",
        "code_import": "actions.auto_insert(\"use \")\n\n    # tag: libraries_gui",
        "code_insert_library": "actions.user.paste(f\"use {text}\")\n\n    # tag: operators_array",
        "code_operator_subscript": "actions.auto_insert(\"[]\")\n        actions.edit.left()\n\n    # tag: code_operators_assignment",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_bitwise_and_assignment": "actions.auto_insert(\" &= \")",
        "code_operator_bitwise_or_assignment": "actions.auto_insert(\" |= \")",
        "code_operator_bitwise_exclusive_or_assignment": "actions.auto_insert(\" ^= \")",
        "code_operator_bitwise_left_shift_assignment": "actions.auto_insert(\" <<= \")",
        "code_operator_bitwise_right_shift_assignment": "actions.auto_insert(\" >>= \")\n\n    # tag: operators_bitwise",
        "code_operator_bitwise_and": "actions.auto_insert(\" & \")",
        "code_operator_bitwise_or": "actions.auto_insert(\" | \")",
        "code_operator_bitwise_exclusive_or": "actions.auto_insert(\" ^ \")",
        "code_operator_bitwise_left_shift": "actions.auto_insert(\" << \")",
        "code_operator_bitwise_right_shift": "actions.auto_insert(\" >> \")\n\n    # tag: operators_math",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_exponent": "actions.auto_insert(\".pow()\")\n        actions.edit.left()",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_equal": "actions.auto_insert(\" == \")",
        "code_operator_not_equal": "actions.auto_insert(\" != \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_operator_increment": "actions.auto_insert(\" += 1\")\n\n    # rust specific grammar",
        "code_operator_structure_dereference": "actions.auto_insert(\"*\")",
        "code_insert_if_let_some": "actions.user.insert_between(\"if let Some(\", \")\")",
        "code_insert_if_let_okay": "actions.user.insert_between(\"if let Ok(\", \")\")",
        "code_insert_if_let_error": "actions.user.insert_between(\"if let Err(\", \")\")",
        "code_state_implements": "actions.auto_insert(\"impl  {}\")\n        actions.edit.left()\n        actions.key(\"enter\")\n        actions.edit.up()\n        actions.edit.line_end()\n        repeat_call(2, actions.edit.left)",
        "code_insert_trait_annotation": "actions.auto_insert(f\": impl {type}\")",
        "code_insert_return_trait": "actions.auto_insert(f\" -> impl {type}\")",
        "code_insert_macro": "if text in all_array_macro_values:\n            code_insert_function_or_macro(text, selection, \"[\", \"]\")\n        elif text in all_block_macro_values:\n            code_insert_function_or_macro(text, selection, \"{\", \"}\")\n        else:\n            code_insert_function_or_macro(text, selection, \"(\", \")\")",
        "code_state_unsafe": "actions.user.insert_between(\"unsafe {\", \"}\")\n        actions.key(\"enter\")",
        "code_comment_documentation_block": "actions.user.insert_between(\"/**\", \"*/\")\n        actions.key(\"enter\")",
        "code_comment_documentation_inner": "actions.auto_insert(\"//! \")",
        "code_insert_function_or_macro": "if selection:\n        out_text = text + f\"{left_delim}{selection}{right_delim}\"\n    else:\n        out_text = text + f\"{left_delim}{right_delim}\"\n    actions.user.paste(out_text)\n    actions.edit.left()\n\n\nRT = TypeVar(\"RT\")  # return type",
        "repeat_call": "for i in range(n):\n        f(*args, **kwargs)"
    },
    "tag: user.r": {
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_exponent": "actions.auto_insert(\" ** \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_equal": "actions.auto_insert(\" == \")",
        "code_operator_not_equal": "actions.auto_insert(\" != \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_operator_bitwise_and": "actions.auto_insert(\" & \")",
        "code_insert_null": "actions.auto_insert(\"nil\")",
        "code_state_if": "actions.insert(\"if \")",
        "code_state_else_if": "actions.insert(\"elsif \")",
        "code_state_else": "actions.insert(\"else\")\n        actions.key(\"enter\")",
        "code_state_for": "actions.insert(\"for ( in ) {}\")\n        actions.key(\"left enter up end left:7\")",
        "code_state_while": "actions.insert(\"while () {}\")\n        actions.key(\"left enter up end left:3\")",
        "code_import": "actions.auto_insert('require \"\"')\n        actions.key(\"left\")",
        "code_comment_line_prefix": "actions.auto_insert(\"# \")",
        "code_state_return": "actions.insert(\"return \")",
        "code_break": "actions.auto_insert(\"break\")",
        "code_next": "actions.auto_insert(\"next\")",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")",
        "code_insert_function": "text += f\"({selection or ''})\"\n        actions.user.paste(text)\n        actions.edit.left()",
        "code_private_function": "result = \"{} <- function () {{\\n\\n}}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.paste(result)\n        actions.edit.up()\n        actions.edit.up()\n        actions.edit.line_end()\n        actions.edit.left()\n        actions.edit.left()\n        actions.edit.left()",
        "code_insert_library": "actions.user.insert_between(\"library(\", \")\")\n        actions.user.paste(text + selection)",
        "code_insert_named_argument": "actions.insert(f\"{parameter_name} = \")",
        "code_operator_lambda": "actions.auto_insert(\"->\")",
        "code_operator_subscript": "actions.insert(\"[]\")\n        actions.key(\"left\")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_bitwise_and_assignment": "actions.auto_insert(\" &= \")",
        "code_operator_bitwise_or": "actions.auto_insert(\" | \")",
        "code_operator_bitwise_or_assignment": "actions.auto_insert(\" |= \")",
        "code_operator_bitwise_exclusive_or": "actions.auto_insert(\" ^ \")",
        "code_operator_bitwise_exclusive_or_assignment": "actions.auto_insert(\" ^= \")",
        "code_operator_bitwise_left_shift": "actions.auto_insert(\" << \")",
        "code_operator_bitwise_left_shift_assignment": "actions.auto_insert(\" <<= \")",
        "code_operator_bitwise_right_shift": "actions.auto_insert(\" >> \")",
        "code_operator_bitwise_right_shift_assignment": "actions.auto_insert(\" >>= \")",
        "code_self": "actions.auto_insert(\"self\")",
        "code_operator_object_accessor": "actions.auto_insert(\".\")",
        "code_insert_is_null": "actions.auto_insert(\".nil?\")\n\n    # Technically .present? is provided by Rails",
        "code_insert_is_not_null": "actions.auto_insert(\".present?\")",
        "code_state_do": "actions.insert(\"do \")",
        "code_state_switch": "actions.insert(\"case \")",
        "code_state_case": "actions.insert(\"when \")",
        "code_state_for_each": "actions.insert(\".each do ||\")\n        actions.key(\"left\")",
        "code_define_class": "actions.auto_insert(\"class \")",
        "code_comment_documentation": "actions.insert(\"##\")\n        actions.key(\"enter\")\n        actions.key(\"space\")\n        ### Extra non-standard things",
        "code_default_function": "\"\"\"Inserts function"
    },
    "tag: user.java": {
        "code_operator_lambda": "actions.auto_insert(\" => \")",
        "code_operator_subscript": "actions.user.insert_between(\"[\", \"]\")",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_exponent": "actions.auto_insert(\" ** \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_equal": "actions.auto_insert(\" == \")",
        "code_operator_not_equal": "actions.auto_insert(\" != \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_operator_bitwise_and": "actions.auto_insert(\" & \")",
        "code_operator_bitwise_and_assignment": "actions.auto_insert(\" &= \")",
        "code_operator_increment": "actions.insert(\"++\")",
        "code_operator_bitwise_or": "actions.auto_insert(\" | \")",
        "code_operator_bitwise_exclusive_or": "actions.auto_insert(\" ^ \")",
        "code_operator_bitwise_left_shift": "actions.auto_insert(\" << \")",
        "code_operator_bitwise_left_shift_assignment": "actions.auto_insert(\" <<= \")",
        "code_operator_bitwise_right_shift": "actions.auto_insert(\" >> \")",
        "code_operator_bitwise_right_shift_assignment": "actions.auto_insert(\" >>= \")",
        "code_self": "actions.auto_insert(\"this\")",
        "code_operator_object_accessor": "actions.auto_insert(\".\")",
        "code_insert_null": "actions.auto_insert(\"null\")",
        "code_insert_is_null": "actions.auto_insert(\" === null\")",
        "code_insert_is_not_null": "actions.auto_insert(\" !== null\")",
        "code_state_if": "actions.user.insert_between(\"if (\", \")\")",
        "code_state_else_if": "actions.user.insert_between(\" else if (\", \")\")",
        "code_state_else": "actions.user.insert_between(\" else {\", \"}\")\n        actions.key(\"enter\")",
        "code_state_switch": "actions.user.insert_between(\"switch (\", \")\")",
        "code_state_case": "actions.user.insert_between(\"case \", \":\")",
        "code_state_for": "actions.user.insert_between(\"for (\", \")\")",
        "code_state_while": "actions.user.insert_between(\"while (\", \")\")",
        "code_break": "actions.auto_insert(\"break;\")",
        "code_next": "actions.auto_insert(\"continue;\")",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")",
        "code_define_class": "actions.auto_insert(\"class \")",
        "code_import": "actions.auto_insert(\"import \")",
        "code_private_function": "result = \"function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)\n\n    #",
        "code_protected_function": "result = \"function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_protected_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)\n\n    #",
        "code_public_function": "result = \"function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)\n\n    #",
        "code_state_return": "actions.insert(\"return \")",
        "code_comment_line_prefix": "actions.insert(\"// \")",
        "code_insert_function": "text += f\"({selection or ''})\"\n        actions.user.paste(text)\n        actions.edit.left()",
        "code_private_static_function": "#     \n    #     result = \"private static void {}\".format(\n    #         actions.user.formatted_text(\n    #             text, settings.get(\"user.code_private_function_formatter\")\n    #         )\n    #     )\n\n    #     actions.user.code_insert_function(result, None)",
        "code_protected_static_function": "#     result = \"protected static void {}\".format(\n    #         actions.user.formatted_text(\n    #             text, settings.get(\"user.code_protected_function_formatter\")\n    #         )\n    #     )\n\n    #     actions.user.code_insert_function(result, None)",
        "code_public_static_function": "#     result = \"public static void {}\".format(\n    #         actions.user.formatted_text(\n    #             text, settings.get(\"user.code_public_function_formatter\")\n    #         )\n    #     )\n\n    #     actions.user.code_insert_function(result, None)",
        "code_block": "actions.user.insert_between(\"{\", \"}\")\n        actions.key(\"enter\")",
        "code_state_do": "actions.auto_insert(\"do \")",
        "code_state_go_to": "actions.auto_insert(\"\")",
        "code_state_for_each": "actions.user.insert_between(\".forEach(\", \")\")",
        "code_operator_bitwise_or_assignment": "actions.auto_insert(\" |= \")",
        "code_operator_bitwise_exclusive_or_assignment": "actions.auto_insert(\" ^= \")",
        "code_default_function": "result = \"function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)"
    },
    "tag: user.php": {
        "code_self": "actions.auto_insert(\"$this\")",
        "code_operator_object_accessor": "actions.auto_insert(\"->\")",
        "code_define_class": "actions.auto_insert(\"class \")",
        "code_block": "actions.insert(\"{}\")\n        actions.edit.left()\n        actions.key(\"enter\")",
        "code_import": "actions.auto_insert(\"use ;\")\n        actions.edit.left()",
        "code_comment_line_prefix": "actions.auto_insert(\"// \")",
        "code_comment_block": "actions.user.code_comment_block_prefix()\n        actions.key(\"enter\")\n        actions.key(\"enter\")\n        actions.user.code_comment_block_suffix()\n        actions.edit.up()",
        "code_comment_block_prefix": "actions.auto_insert(\"/*\")",
        "code_comment_block_suffix": "actions.auto_insert(\"*/\")",
        "code_comment_documentation": "actions.insert(\"/**\")",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")",
        "code_insert_null": "actions.auto_insert(\"null\")",
        "code_insert_is_null": "actions.auto_insert(\"is_null()\")\n        actions.edit.left()",
        "code_insert_is_not_null": "actions.auto_insert(\"isset()\")\n        actions.edit.left()",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_exponent": "actions.auto_insert(\" ** \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_equal": "actions.auto_insert(\" === \")",
        "code_operator_not_equal": "actions.auto_insert(\" !== \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_state_if": "actions.insert(\"if ()\")\n        actions.edit.left()",
        "code_state_else_if": "actions.insert(\"elseif ()\")\n        actions.edit.left()",
        "code_state_else": "actions.insert(\"else {\")\n        actions.key(\"enter\")",
        "code_state_while": "actions.insert(\"while ()\")\n        actions.edit.left()",
        "code_state_for": "actions.insert(\"for ()\")\n        actions.edit.left()",
        "code_state_for_each": "actions.insert(\"foreach ()\")\n        actions.edit.left()",
        "code_state_switch": "actions.insert(\"switch ()\")\n        actions.edit.left()",
        "code_state_case": "actions.insert(\"case :\")\n        actions.edit.left()",
        "code_state_do": "actions.insert(\"do {\")\n        actions.key(\"enter\")",
        "code_state_go_to": "actions.insert(\"goto ;\")\n        actions.edit.left()",
        "code_state_return": "actions.insert(\"return ;\")\n        actions.edit.left()",
        "code_break": "actions.insert(\"break;\")",
        "code_next": "actions.insert(\"continue;\")",
        "code_default_function": "actions.user.code_public_function(text)",
        "code_protected_function": "result = \"protected function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_protected_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_public_function": "result = \"public function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_private_function": "result = \"private function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_private_static_function": "result = \"private static function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_protected_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_protected_static_function": "result = \"protected static function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_protected_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_public_static_function": "result = \"public static function {}()\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n        actions.user.paste(result)\n        actions.edit.left()",
        "code_insert_return_type": "actions.insert(f\": {type}\")"
    },
    "tag: user.lua": {
        "code_state_if": "actions.user.insert_between(\"if \", \" then\")",
        "code_state_else_if": "actions.user.insert_between(\"elseif \", \" then\")",
        "code_state_else": "actions.insert(\"else\\n\")",
        "code_state_do": "actions.insert(\"repeat\\n\")",
        "code_state_for": "actions.user.insert_between(\"for \", \" do\")",
        "code_state_go_to": "actions.insert(\"goto \")",
        "code_state_while": "actions.user.insert_between(\"while \", \" do\")",
        "code_state_return": "actions.insert(\"return \")",
        "code_break": "actions.insert(\"break \")\n\n    # Assumes a ::continue:: label",
        "code_state_continue": "actions.insert(\"goto continue\")",
        "code_try_catch": "actions.user.insert_between(\"pcall(\", \")\")\n\n    ##\n    # code_comment_line\n    ##",
        "code_comment_line_prefix": "actions.insert(\"-- \")\n\n    ##\n    # code_comment_block\n    ##",
        "code_comment_block": "actions.insert(\"--[[\\n\\n--]]\")\n        actions.edit.up()",
        "code_comment_block_prefix": "actions.insert(\"--[[\")",
        "code_comment_block_suffix": "actions.insert(\"--]]\")\n\n    ##\n    # code_data_bool\n    ##",
        "code_insert_true": "actions.insert(\"true\")",
        "code_insert_false": "actions.insert(\"false\")\n\n    ##\n    # code_data_null\n    ##",
        "code_insert_null": "actions.insert(\"nil\")",
        "code_insert_is_null": "actions.insert(\" == nil\")",
        "code_insert_is_not_null": "actions.insert(\" ~= nil\")\n\n    ##\n    # code_functions\n    ##",
        "code_private_function": "result = \"local function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.insert(\"\\n\\nend\")\n        actions.key(\"up:2\")\n        actions.user.code_insert_function(result, None)",
        "code_public_function": "result = \"function {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_public_function_formatter\")\n            )\n        )\n\n        actions.insert(\"\\n\\nend\")\n        actions.key(\"up:2\")\n        actions.user.code_insert_function(result, None)",
        "code_insert_function": "if selection:\n            text = text + f\"({selection})\"\n        else:\n            text = text + \"()\"\n\n        actions.user.paste(text)\n        actions.edit.left()\n\n    ##\n    # code_libraries\n    ##",
        "code_import": "actions.user.insert_between(\"local \", \" = require('')\")\n\n    ##\n    # code_libraries_gui\n    ##",
        "code_insert_library": "actions.insert(f\"local {selection} = require('{selection}')\")\n\n    ##\n    # code_operators_array\n    ##",
        "code_operator_subscript": "actions.user.insert_between(\"[\", \"]\")\n\n    ##\n    # code_operators_assignment\n    ##",
        "code_operator_assignment": "actions.insert(\" = \")\n\n    ##\n    # code_operators_math\n    ##",
        "code_operator_subtraction": "actions.insert(\" - \")",
        "code_operator_addition": "actions.insert(\" + \")",
        "code_operator_multiplication": "actions.insert(\" * \")",
        "code_operator_division": "actions.insert(\" / \")",
        "code_operator_modulo": "actions.insert(\" % \")",
        "code_operator_equal": "actions.insert(\" == \")",
        "code_operator_not_equal": "actions.insert(\" ~= \")",
        "code_operator_greater_than": "actions.insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.insert(\" >= \")",
        "code_operator_less_than": "actions.insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.insert(\" <= \")",
        "code_operator_and": "actions.insert(\" and \")",
        "code_operator_or": "actions.insert(\" or \")\n\n    ###\n    # code_operators_bitwise\n    ###\n\n    # NOTE: < 5.3 assumes Lua BitOp usage\n    #       > 5.2 assumes native bitwise operators\n    # TODO: Possibly add settings to",
        "code_operator_bitwise_and": "if settings.get(\"user.lua_version\") > 5.2:\n            actions.insert(\" & \")\n        else:\n            actions.insert(\" bit.band() \")",
        "code_operator_bitwise_or": "if settings.get(\"user.lua_version\") > 5.2:\n            actions.insert(\" | \")\n        else:\n            actions.insert(\" bit.bor() \")",
        "code_operator_bitwise_exclusive_or": "if settings.get(\"user.lua_version\") > 5.2:\n            actions.insert(\" ~ \")\n        else:\n            actions.insert(\" bit.xor() \")",
        "code_operator_bitwise_left_shift": "if settings.get(\"user.lua_version\") > 5.2:\n            actions.insert(\" << \")\n        else:\n            actions.insert(\" bit.lshift() \")",
        "code_operator_bitwise_right_shift": "if settings.get(\"user.lua_version\") > 5.2:\n            actions.insert(\" >> \")\n        else:\n            actions.insert(\" bit.rshift() \")\n\n    # non-tag related actions"
    },
    "tag: stylua": {},
    "tag: code_functions": {},
    "tag: code_comment_line": {},
    "tag: code_operators_math": {},
    "tag: code_operators_bitwise": {},
    "tag: code_operators_array": {},
    "tag: code_data_bool": {},
    "tag: code_data_null": {},
    "tag: code_comment_block": {},
    "tag: code_comment_block_c_like": {},
    "tag: code_keywords": {},
    "tag: code_functions_common": {},
    "tag: code_libraries_gui": {},
    "tag: code_operators_pointer": {},
    "tag: code_operators_assignment": {},
    "tag: user.scala": {
        "code_block": "actions.insert(\"{}\")\n        actions.edit.left()\n        actions.key(\"enter\")",
        "code_operator_lambda": "actions.insert(\" => \")",
        "code_operator_subscript": "actions.insert(\"()\")\n        actions.edit.left()",
        "code_operator_assignment": "actions.insert(\" = \")",
        "code_operator_subtraction": "actions.insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.insert(\" -= \")",
        "code_operator_addition": "actions.insert(\" + \")",
        "code_operator_addition_assignment": "actions.insert(\" += \")",
        "code_operator_multiplication": "actions.insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.insert(\" *= \")",
        "code_operator_exponent": "actions.insert(\" ^ \")",
        "code_operator_division": "actions.insert(\" / \")",
        "code_operator_division_assignment": "actions.insert(\" /= \")",
        "code_operator_modulo": "actions.insert(\" % \")",
        "code_operator_modulo_assignment": "actions.insert(\" %= \")",
        "code_operator_equal": "actions.insert(\" == \")",
        "code_operator_not_equal": "actions.insert(\" != \")",
        "code_operator_greater_than": "actions.insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.insert(\" >= \")",
        "code_operator_less_than": "actions.insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.insert(\" <= \")",
        "code_operator_and": "actions.insert(\" && \")",
        "code_operator_or": "actions.insert(\" || \")",
        "code_operator_bitwise_and": "actions.insert(\" & \")",
        "code_operator_bitwise_and_assignment": "actions.insert(\" &= \")",
        "code_operator_increment": "actions.insert(\"++\")",
        "code_operator_bitwise_or": "actions.insert(\" | \")",
        "code_operator_bitwise_exclusive_or": "actions.insert(\" ^ \")",
        "code_operator_bitwise_left_shift": "actions.insert(\" << \")",
        "code_operator_bitwise_left_shift_assignment": "actions.insert(\" <<= \")",
        "code_operator_bitwise_right_shift": "actions.insert(\" >> \")",
        "code_operator_bitwise_right_shift_assignment": "actions.insert(\" >>= \")",
        "code_self": "actions.insert(\"this\")",
        "code_insert_null": "actions.insert(\"null\")",
        "code_insert_is_null": "actions.insert(\" == null\")",
        "code_insert_is_not_null": "actions.insert(\" != null\")",
        "code_state_if": "actions.insert(\"if () \")\n        actions.edit.left()\n        actions.edit.left()",
        "code_state_else_if": "actions.insert(\"else if () \")\n        actions.edit.left()\n        actions.edit.left()",
        "code_state_else": "actions.insert(\"else \")",
        "code_state_switch": "actions.insert(\"match {\\n\")",
        "code_state_case": "actions.insert(\"case  => \")\n        actions.edit.left()\n        actions.edit.left()\n        actions.edit.left()\n        actions.edit.left()",
        "code_state_for": "actions.insert(\"for () \")\n        actions.edit.left()\n        actions.edit.left()",
        "code_state_while": "actions.insert(\"while () \")\n        actions.edit.left()\n        actions.edit.left()",
        "code_break": "actions.insert(\"break\")",
        "code_next": "actions.insert(\"continue\")",
        "code_insert_true": "actions.insert(\"true\")",
        "code_insert_false": "actions.insert(\"false\")",
        "code_define_class": "actions.insert(\"class \")",
        "code_import": "actions.insert(\"import \")",
        "code_state_return": "actions.insert(\"return \")",
        "code_comment_line_prefix": "actions.insert(\"// \")",
        "code_comment_block": "actions.insert(\"/*\")\n        actions.key(\"enter\")\n        actions.key(\"enter\")\n        actions.insert(\"*/\")\n        actions.edit.up()",
        "code_comment_block_prefix": "actions.insert(\"/*\")",
        "code_comment_block_suffix": "actions.insert(\"*/\")",
        "code_insert_type_annotation": "actions.insert(f\": {type}\")",
        "code_insert_return_type": "actions.insert(f\": {type}\")",
        "code_operator_object_accessor": "actions.insert(\".\")",
        "code_default_function": "actions.user.code_public_function(text)",
        "code_insert_function": "if selection:\n            text = text + f\"({selection})\"\n        else:\n            text = text + \"()\"\n\n        actions.user.paste(text)\n        actions.edit.left()",
        "code_private_function": "result = \"private",
        "code_protected_function": "result = \"protected",
        "code_public_function": "result = \""
    },
    "tag: user.batch": {
        "code_comment_line_prefix": "actions.auto_insert(\"REM \")"
    },
    "tag: user.csharp": {
        "update_list": "#     ctx.lists[\"user.snippets\"] = watch_list\n\n\n# # there's probably a way to do this without\n# snippet_path = None\n# if app.platform == \"windows\":\n#     snippet_path = os.path.expandvars(r\"%AppData%\\Code\\User\\snippets\")\n# elif app.platform == \"mac\":\n#     snippet_path = os.path.expanduser(\n#         \"~/Library/Application Support/Code/User/snippets\"\n#     )\n# if snippet_path:\n#     watcher2 = snippet_watcher({snippet_path: [\"csharp.json\",],}, update_list,)\n# print(\"reloaded!\")"
    },
    "tag: user.c": {
        "code_operator_indirection": "actions.auto_insert(\"*\")",
        "code_operator_address_of": "actions.auto_insert(\"&\")",
        "code_operator_structure_dereference": "actions.auto_insert(\"->\")",
        "code_operator_subscript": "actions.insert(\"[]\")\n        actions.key(\"left\")",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")\n\n    # action(user.code_operator_exponent): \" ** \"",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_equal": "actions.auto_insert(\" == \")",
        "code_operator_not_equal": "actions.auto_insert(\" != \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_operator_bitwise_and": "actions.auto_insert(\" & \")",
        "code_operator_bitwise_and_assignment": "actions.auto_insert(\" &= \")",
        "code_operator_bitwise_or": "actions.auto_insert(\" | \")",
        "code_operator_bitwise_or_assignment": "actions.auto_insert(\" |= \")",
        "code_operator_bitwise_exclusive_or": "actions.auto_insert(\" ^ \")",
        "code_operator_bitwise_exclusive_or_assignment": "actions.auto_insert(\" ^= \")",
        "code_operator_bitwise_left_shift": "actions.auto_insert(\" << \")",
        "code_operator_bitwise_left_shift_assignment": "actions.auto_insert(\" <<= \")",
        "code_operator_bitwise_right_shift": "actions.auto_insert(\" >> \")",
        "code_operator_bitwise_right_shift_assignment": "actions.auto_insert(\" >>= \")",
        "code_insert_null": "actions.auto_insert(\"NULL\")",
        "code_insert_is_null": "actions.auto_insert(\" == NULL \")",
        "code_insert_is_not_null": "actions.auto_insert(\" != NULL\")",
        "code_state_if": "actions.insert(\"if () {\\n}\\n\")\n        actions.key(\"up:2 left:3\")",
        "code_state_else_if": "actions.insert(\"else if () {\\n}\\n\")\n        actions.key(\"up:2 left:3\")",
        "code_state_else": "actions.insert(\"else\\n{\\n}\\n\")\n        actions.key(\"up:2\")",
        "code_state_switch": "actions.insert(\"switch ()\")\n        actions.edit.left()",
        "code_state_case": "actions.insert(\"case \\nbreak;\")\n        actions.edit.up()",
        "code_state_for": "actions.auto_insert(\"for \")",
        "code_state_go_to": "actions.auto_insert(\"goto \")",
        "code_state_while": "actions.insert(\"while ()\")\n        actions.edit.left()",
        "code_state_return": "actions.auto_insert(\"return \")",
        "code_break": "actions.auto_insert(\"break;\")",
        "code_next": "actions.auto_insert(\"continue;\")",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")",
        "code_comment_line_prefix": "actions.auto_insert(\"//\")",
        "code_insert_function": "if selection:\n            text = text + f\"({selection})\"\n        else:\n            text = text + \"()\"\n\n        actions.user.paste(text)\n        actions.edit.left()\n\n    # TODO - it would be nice that you integrate that types from c_cast\n    # instead of",
        "code_private_function": "result = \"void {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)",
        "code_private_static_function": "result = \"static void {}\".format(\n            actions.user.formatted_text(\n                text, settings.get(\"user.code_private_function_formatter\")\n            )\n        )\n\n        actions.user.code_insert_function(result, None)",
        "code_insert_library": "actions.user.paste(f\"include <{text}>\")",
        "__repr__": "return \"<argument not set>\"\n\n\nclass NoFileServerException(Exception):\n    pass",
        "write_json_exclusive": "with path.open(\"x\") as out_file:\n        out_file.write(json.dumps(body))\n\n\n@dataclass\nclass Request:\n    command_id: str\n    args: list[Any]\n    wait_for_finish: bool\n    return_command_output: bool\n    uuid: str",
        "to_dict": "return {\n            \"commandId\": self.command_id,\n            \"args\": self.args,\n            \"waitForFinish\": self.wait_for_finish,\n            \"returnCommandOutput\": self.return_command_output,\n            \"uuid\": self.uuid,\n        }",
        "write_request": "try:\n        write_json_exclusive(path, request.to_dict())\n        request_file_exists = False\n    except FileExistsError:\n        request_file_exists = True\n\n    if request_file_exists:\n        handle_existing_request_file(path)\n        write_json_exclusive(path, request.to_dict())",
        "handle_existing_request_file": "stats = path.stat()\n\n    modified_time_ms = stats.st_mtime_ns / 1e6\n    current_time_ms = time.time() * 1e3\n    time_difference_ms = abs(modified_time_ms - current_time_ms)\n\n    if time_difference_ms < STALE_TIMEOUT_MS:\n        raise Exception(\n            \"Found recent request file; another Talon process is probably running\"\n        )\n\n    print(\"Removing stale request file\")\n    robust_unlink(path)",
        "run_command": "# NB: This is a hack to work around the fact that talon doesn't support\n    # variable argument lists\n    args = [x for x in args if x is not NotSet]\n\n    communication_dir_path = get_communication_dir_path()\n\n    if not communication_dir_path.exists():\n        if args or return_command_output:\n            raise Exception(\"Must use command-server extension for advanced commands\")\n        raise NoFileServerException(\"Communication directory not found\")\n\n    request_path = communication_dir_path / \"request.json\"\n    response_path = communication_dir_path / \"response.json\"\n\n    # Generate uuid that will be mirrored back to us by command server for\n    # sanity checking\n    uuid = str(uuid4())\n\n    request = Request(\n        command_id=command_id,\n        args=args,\n        wait_for_finish=wait_for_finish,\n        return_command_output=return_command_output,\n        uuid=uuid,\n    )\n\n    # First, write the request to the request file, which makes us the sole\n    # owner because all other processes will try to open it with 'x'\n    write_request(request, request_path)\n\n    # We clear the response file if it does exist, though it shouldn't\n    if response_path.exists():\n        print(\"WARNING: Found old response file\")\n        robust_unlink(response_path)\n\n    # Then, perform keystroke telling application to execute the command in the\n    # request file.  Because only the active application instance will accept\n    # keypresses, we can be sure that the active application instance will be the\n    # one to execute the command.\n    actions.user.trigger_command_server_command_execution()\n\n    try:\n        decoded_contents = read_json_with_timeout(response_path)\n    finally:\n        # NB: We remove response file first because we want to do this while we\n        # still own the request file\n        robust_unlink(response_path)\n        robust_unlink(request_path)\n\n    if decoded_contents[\"uuid\"] != uuid:\n        raise Exception(\"uuids did not match\")\n\n    for warning in decoded_contents[\"warnings\"]:\n        print(f\"WARNING: {warning}\")\n\n    if decoded_contents[\"error\"] is not None:\n        raise Exception(decoded_contents[\"error\"])\n\n    actions.sleep(\"25ms\")\n\n    return decoded_contents[\"returnValue\"]",
        "get_communication_dir_path": "suffix = \"\"\n\n    # NB: We don't suffix on Windows, because the temp dir is user-specific\n    # anyways\n    if hasattr(os, \"getuid\"):\n        suffix = f\"-{os.getuid()}\"\n\n    return Path(gettempdir()) / f\"{actions.user.command_server_directory()}{suffix}\"",
        "robust_unlink": "try:\n        path.unlink(missing_ok=True)\n    except OSError as e:\n        if hasattr(e, \"winerror\") and e.winerror == 32:\n            graveyard_dir = get_communication_dir_path() / \"graveyard\"\n            graveyard_dir.mkdir(parents=True, exist_ok=True)\n            graveyard_path = graveyard_dir / str(uuid4())\n            print(\n                f\"WARNING: File {path} was in use when we tried to delete it; \"\n                f\"moving to graveyard at path {graveyard_path}\"\n            )\n            path.rename(graveyard_path)\n        else:\n            raise e",
        "run_rpc_command": "run_command(\n            command_id,\n            arg1,\n            arg2,\n            arg3,\n            arg4,\n            arg5,\n        )",
        "run_rpc_command_and_wait": "run_command(\n            command_id,\n            arg1,\n            arg2,\n            arg3,\n            arg4,\n            arg5,\n            wait_for_finish=True,\n        )",
        "trigger_command_server_command_execution": "actions.key(\"cmd-shift-f17\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "emit_pre_phrase_signal": "get_signal_path(\"prePhrase\").touch()\n        return True\n\n\nclass MissingCommunicationDir(Exception):\n    pass",
        "pre_phrase": "try:\n        global did_emit_pre_phrase_signal\n\n        did_emit_pre_phrase_signal = actions.user.emit_pre_phrase_signal()\n    except MissingCommunicationDir:\n        pass",
        "post_phrase": "global did_emit_pre_phrase_signal\n    did_emit_pre_phrase_signal = False\n\n\nspeech_system.register(\"pre:phrase\", pre_phrase)\nspeech_system.register(\"post:phrase\", post_phrase)",
        "update_list": "#     ctx.lists[\"user.snippets\"] = watch_list\n\n\n# # there's probably a way to do this without\n# snippet_path = None\n# if app.platform == \"windows\":\n#     snippet_path = os.path.expandvars(r\"%AppData%\\Code\\User\\snippets\")\n# elif app.platform == \"mac\":\n#     snippet_path = os.path.expanduser(\n#         \"~/Library/Application Support/Code/User/snippets\"\n#     )\n# if snippet_path:\n#     watcher2 = snippet_watcher({snippet_path: [\"csharp.json\",],}, update_list,)\n# print(\"reloaded!\")"
    },
    "tag: user.ruby": {
        "code_operator_lambda": "actions.auto_insert(\"->\")",
        "code_operator_subscript": "actions.insert(\"[]\")\n        actions.key(\"left\")",
        "code_operator_assignment": "actions.auto_insert(\" = \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_subtraction_assignment": "actions.auto_insert(\" -= \")",
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_addition_assignment": "actions.auto_insert(\" += \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_multiplication_assignment": "actions.auto_insert(\" *= \")",
        "code_operator_exponent": "actions.auto_insert(\" ** \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_division_assignment": "actions.auto_insert(\" /= \")",
        "code_operator_modulo": "actions.auto_insert(\" % \")",
        "code_operator_modulo_assignment": "actions.auto_insert(\" %= \")",
        "code_operator_equal": "actions.auto_insert(\" == \")",
        "code_operator_not_equal": "actions.auto_insert(\" != \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_and": "actions.auto_insert(\" && \")",
        "code_operator_or": "actions.auto_insert(\" || \")",
        "code_operator_bitwise_and": "actions.auto_insert(\" & \")",
        "code_operator_bitwise_and_assignment": "actions.auto_insert(\" &= \")",
        "code_operator_bitwise_or": "actions.auto_insert(\" | \")",
        "code_operator_bitwise_or_assignment": "actions.auto_insert(\" |= \")",
        "code_operator_bitwise_exclusive_or": "actions.auto_insert(\" ^ \")",
        "code_operator_bitwise_exclusive_or_assignment": "actions.auto_insert(\" ^= \")",
        "code_operator_bitwise_left_shift": "actions.auto_insert(\" << \")",
        "code_operator_bitwise_left_shift_assignment": "actions.auto_insert(\" <<= \")",
        "code_operator_bitwise_right_shift": "actions.auto_insert(\" >> \")",
        "code_operator_bitwise_right_shift_assignment": "actions.auto_insert(\" >>= \")",
        "code_self": "actions.auto_insert(\"self\")",
        "code_operator_object_accessor": "actions.auto_insert(\".\")",
        "code_insert_null": "actions.auto_insert(\"nil\")",
        "code_insert_is_null": "actions.auto_insert(\".nil?\")\n\n    # Technically .present? is provided by Rails",
        "code_insert_is_not_null": "actions.auto_insert(\".present?\")",
        "code_state_do": "actions.insert(\"do \")",
        "code_state_if": "actions.insert(\"if \")",
        "code_state_else_if": "actions.insert(\"elsif \")",
        "code_state_else": "actions.insert(\"else\")\n        actions.key(\"enter\")",
        "code_state_switch": "actions.insert(\"case \")",
        "code_state_case": "actions.insert(\"when \")",
        "code_state_for_each": "actions.insert(\".each do ||\")\n        actions.key(\"left\")",
        "code_define_class": "actions.auto_insert(\"class \")",
        "code_import": "actions.auto_insert('require \"\"')\n        actions.key(\"left\")",
        "code_comment_line_prefix": "actions.auto_insert(\"# \")",
        "code_state_return": "actions.insert(\"return \")",
        "code_insert_true": "actions.auto_insert(\"true\")",
        "code_insert_false": "actions.auto_insert(\"false\")",
        "code_comment_documentation": "actions.insert(\"##\")\n        actions.key(\"enter\")\n        actions.key(\"space\")\n        ### Extra non-standard things",
        "code_default_function": "\"\"\"Inserts function"
    },
    "tag: user.sql": {
        "code_operator_addition": "actions.auto_insert(\" + \")",
        "code_operator_subtraction": "actions.auto_insert(\" - \")",
        "code_operator_multiplication": "actions.auto_insert(\" * \")",
        "code_operator_division": "actions.auto_insert(\" / \")",
        "code_operator_equal": "actions.auto_insert(\" = \")",
        "code_operator_not_equal": "actions.auto_insert(\" <> \")",
        "code_operator_greater_than": "actions.auto_insert(\" > \")",
        "code_operator_greater_than_or_equal_to": "actions.auto_insert(\" >= \")",
        "code_operator_less_than": "actions.auto_insert(\" < \")",
        "code_operator_less_than_or_equal_to": "actions.auto_insert(\" <= \")",
        "code_operator_in": "actions.user.insert_between(\" IN (\", \")\")",
        "code_operator_not_in": "actions.user.insert_between(\" NOT IN (\", \")\")",
        "code_operator_and": "actions.auto_insert(\"AND \")",
        "code_operator_or": "actions.auto_insert(\"OR \")",
        "code_insert_null": "actions.auto_insert(\"NULL\")",
        "code_insert_is_null": "actions.auto_insert(\" IS NULL\")",
        "code_insert_is_not_null": "actions.auto_insert(\" IS NOT NULL\")",
        "code_comment_line_prefix": "actions.auto_insert(\"-- \")",
        "code_insert_function": "actions.user.insert_between(f\"{text}({selection or ''}\", \")\")"
    },
    "app: firefox": {
        "firefox_bookmarks_sidebar": "actions.key(\"cmd-b\")",
        "firefox_history_sidebar": "actions.key(\"cmd-shift-h\")\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "bookmarks": "actions.key(\"cmd-shift-o\")",
        "open_private_window": "actions.key(\"cmd-shift-p\")",
        "show_downloads": "actions.key(\"cmd-j\")",
        "show_extensions": "actions.key(\"cmd-shift-a\")"
    },
    "tag: anaconda": {},
    "tag: user.anaconda": {},
    "app: Guake": {
        "tab_open": "actions.key(\"ctrl-shift-t\")",
        "tab_close": "actions.key(\"ctrl-shift-w\")",
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")"
    },
    "tag: terraform_client": {},
    "app: iterm2": {
        "line_start": "actions.key(\"home\")",
        "line_end": "actions.key(\"end\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:\n    #",
        "file_manager_current_path": "#     title = ui.active_window().title\n\n    #     if \"~\" in title:\n    #         title = os.path.expanduser(title)\n\n    #     if title in directories_to_remap:\n    #         title = directories_to_remap[title]\n\n    #     if title in directories_to_exclude:\n    #         title = None\n\n    #     return title\n\n    #",
        "file_manager_show_properties": "#     \n\n    #",
        "file_manager_open_directory": "#     \n    #     actions.insert(\"cd \")\n    #     path = '\"{}\"'.format(path)\n    #     actions.insert(path)\n    #     actions.key(\"enter\")\n    #     actions.user.file_manager_refresh_title()\n\n    #",
        "file_manager_select_directory": "#     \n    #     actions.insert(path)\n\n    #",
        "file_manager_new_folder": "#     \n    #     name = '\"{}\"'.format(name)\n\n    #     actions.insert(\"mkdir \" + name)\n\n    #",
        "file_manager_open_file": "#     \n    #     actions.insert(path)\n    #     actions.key(\"enter\")\n\n    #",
        "file_manager_select_file": "#     \n    #     actions.insert(path)",
        "tab_jump": "actions.key(f\"cmd-{number}\")",
        "tab_final": "actions.key(\"cmd-9\")",
        "terminal_clear_screen": "actions.key(\"ctrl-l\")"
    },
    "app: atril": {
        "page_current": "actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()\n        actions.key(\"right escape\")\n        return int(page)",
        "page_next": "actions.key(\"ctrl-pagedown\")",
        "page_previous": "actions.key(\"ctrl-pageup\")",
        "page_jump": "actions.key(\"ctrl-l\")\n        actions.insert(str(number))\n        actions.key(\"enter\")",
        "page_final": "actions.key(\"ctrl-end\")"
    },
    "tag: gdb": {},
    "app: discord": {
        "discord_quick_switcher": "actions.key(\"ctrl-k\")\n        actions.insert(dest_type)\n        if dest_search:\n            actions.insert(dest_search)\n\n    # Navigation: Servers",
        "messaging_workspace_previous": "actions.key(\"ctrl-alt-up\")",
        "messaging_workspace_next": "actions.key(\"ctrl-alt-down\")\n\n    # Navigation: Channels",
        "messaging_channel_previous": "actions.key(\"alt-up\")",
        "messaging_channel_next": "actions.key(\"alt-down\")",
        "messaging_unread_previous": "actions.key(\"alt-shift-up\")",
        "messaging_unread_next": "actions.key(\"alt-shift-down\")",
        "discord_mentions_last": "actions.key(\"ctrl-alt-shift-up\")",
        "discord_mentions_next": "actions.key(\"ctrl-alt-shift-down\")",
        "discord_oldest_unread": "actions.key(\"shift-pageup\")\n\n    # UI",
        "discord_toggle_pins": "actions.key(\"ctrl-p\")",
        "discord_toggle_inbox": "actions.key(\"ctrl-i\")",
        "discord_toggle_members": "actions.key(\"ctrl-u\")",
        "discord_emoji_picker": "actions.key(\"ctrl-e\")",
        "discord_gif_picker": "actions.key(\"ctrl-g\")",
        "discord_sticker_picker": "actions.key(\"ctrl-s\")\n\n    # Misc",
        "messaging_mark_workspace_read": "actions.key(\"shift-esc\")",
        "messaging_mark_channel_read": "actions.key(\"esc\")",
        "messaging_upload_file": "actions.key(\"ctrl-shift-u\")",
        "discord_mark_inbox_read": "actions.key(\"ctrl-shift-e\")",
        "discord_mute": "actions.key(\"ctrl-shift-m\")",
        "discord_deafen": "actions.key(\"ctrl-shift-d\")",
        "discord_answer_call": "actions.key(\"ctrl-enter\")",
        "discord_decline_call": "actions.key(\"esc\")",
        "discord_go_current_call": "actions.key(\"ctrl-shift-alt-v\")",
        "discord_toggle_dms": "actions.key(\"ctrl-alt-right\")"
    },
    "app: eclipse": {
        "tab_close": "actions.key(\"ctrl-w\")",
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")\n\n    # action(app.tab_reopen):",
        "window_close": "actions.key(\"alt-f4\")",
        "window_open": "actions.key(\"alt-w n\")\n\n\n@ctx.action_class(\"code\")\nclass CodeActions:\n    # talon code actions",
        "toggle_comment": "actions.key(\"ctrl-7\")\n\n\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "find": "actions.key(\"ctrl-f\")\n        if text:\n            actions.insert(text)",
        "line_swap_up": "actions.key(\"alt-up\")",
        "line_swap_down": "actions.key(\"alt-down\")",
        "line_clone": "actions.key(\"ctrl-alt-down\")",
        "jump_line": "actions.key(\"ctrl-l\")\n        actions.insert(str(n))\n        actions.key(\"enter\")",
        "delete_line": "actions.key(\"ctrl-d\")",
        "indent_more": "actions.key(\"tab\")",
        "indent_less": "actions.key(\"shift-tab\")",
        "save_all": "actions.key(\"ctrl-shift-s\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:\n    # generic_snippet.py support beginHelp close\n    #",
        "snippet_search": "#     actions.user.vscode(\"Insert Snippet\")\n    #     actions.insert(text)\n\n    #",
        "snippet_insert": "#     \n    #     actions.user.vscode(\"Insert Snippet\")\n    #     actions.insert(text)\n    #     actions.key(\"enter\")\n\n    #",
        "snippet_create": "#     \n    #     actions.user.vscode(\"Preferences: Configure User Snippets\")\n\n    # generic_snippet.py support end\n\n    # splits.py support begin\n    # requires https://marketplace.eclipse.org/content/handysplit",
        "split_clear_all": "actions.key(\"alt-shift-s f\")",
        "split_clear": "actions.key(\"alt-shift-s f\")\n\n    # action(user.split_flip):",
        "split_last": "actions.key(\"alt-shift-s t\")",
        "split_next": "actions.key(\"alt-shift-s t\")",
        "split_window_down": "actions.key(\"alt-shift-s m\")",
        "split_window_horizontally": "actions.key(\"alt-ctrl-s s\")",
        "split_window_right": "actions.key(\"alt-shift-s m\")",
        "split_window_up": "actions.key(\"alt-shift-s m\")",
        "split_window_vertically": "actions.key(\"alt-shift-s s\")",
        "split_window": "actions.key(\"alt-ctrl-s s\")\n\n    # splits.py support end\n\n    # find_and_replace.py support begin",
        "find_next": "actions.key(\"enter\")",
        "find_previous": "actions.key(\"shift-enter\")",
        "find_everywhere": "actions.key(\"ctrl-h\")\n\n        if text:\n            actions.insert(text)\n\n    # todo: these commands should only be available\n    # when it's focused",
        "find_toggle_match_by_case": "actions.key(\"alt-c\")",
        "find_toggle_match_by_word": "actions.key(\"alt-w\")",
        "find_toggle_match_by_regex": "actions.key(\"alt-e\")",
        "replace": "actions.key(\"ctrl-f\")\n\n        if text:\n            actions.insert(text)",
        "replace_everywhere": "actions.key(\"alt-a f\")\n\n        if text:\n            actions.insert(text)",
        "replace_confirm": "actions.key(\"alt-r\")",
        "replace_confirm_all": "actions.key(\"alt-a\")",
        "select_previous_occurrence": "actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"alt-b alt-f enter esc\")",
        "select_next_occurrence": "actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"alt-f alt-o esc\")\n\n    # find_and_replace.py support end"
    },
    "app: visual_studio": {},
    "app: nautilus": {
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs",
        "tab_jump": "actions.key(f\"alt-{number}\")\n\n    # user.file_manager",
        "file_manager_go_back": "actions.key(\"alt-left\")",
        "file_manager_go_forward": "actions.key(\"alt-right\")",
        "file_manager_open_parent": "actions.key(\"alt-up\")",
        "file_manager_show_properties": "actions.key(\"ctrl-i\")",
        "file_manager_open_directory": "actions.key(\"ctrl-l\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_new_folder": "actions.key(\"ctrl-shift-n\")\n        if name:\n            actions.insert(name)",
        "file_manager_terminal_here": "actions.key(\"ctrl-l\")\n        with clip.capture() as path:\n            actions.edit.copy()\n        ui.launch(path=\"gnome-terminal\", args=[f\"--working-directory={path.get()}\"])"
    },
    "app: windows_terminal": {
        "delete_line": "actions.key(\"esc\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "file_manager_refresh_title": "actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")",
        "file_manager_open_parent": "actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_current_path": "path = ui.active_window().title\n        path = path.replace(\"Administrator:  \", \"\").replace(\"Command Prompt: \", \"\")\n        if path in directories_to_remap:\n            path = directories_to_remap[path]\n\n        if path in directories_to_exclude:\n            path = \"\"\n        return path\n\n    #",
        "file_manager_terminal_here": "#     actions.key(\"ctrl-l\")\n    #     actions.insert(\"cmd.exe\")\n    #     actions.key(\"enter\")\n\n    #",
        "file_manager_show_properties": "#     \n    #     actions.key(\"alt-enter\")",
        "file_manager_open_directory": "actions.insert(f'cd \"{path}\"')\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_select_directory": "actions.insert(f'\"{path}\"')",
        "file_manager_new_folder": "actions.insert(f'mkdir \"{name}\"')",
        "file_manager_open_file": "actions.insert(path)\n        # actions.key(\"enter\")",
        "file_manager_select_file": "actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)",
        "terminal_list_directories": "actions.insert(\"dir\")\n        actions.key(\"enter\")",
        "terminal_list_all_directories": "actions.insert(\"dir /a\")\n        actions.key(\"enter\")",
        "terminal_change_directory": "actions.insert(f\"cd {path}\")\n        # if path:\n        # actions.key(\"enter\")",
        "terminal_change_directory_root": "actions.insert(\"cd /\")\n        actions.key(\"enter\")",
        "terminal_clear_screen": "actions.insert(\"cls\")\n        actions.key(\"enter\")",
        "terminal_run_last": "actions.key(\"up enter\")",
        "terminal_kill_all": "actions.key(\"ctrl-c\")\n        actions.insert(\"y\")\n        actions.key(\"enter\")"
    },
    "app: notepad_plus_plus": {
        "tab_previous": "actions.key(\"ctrl-pageup\")",
        "tab_next": "actions.key(\"ctrl-pagedown\")\n\n\n@ctx.action_class(\"code\")\nclass CodeActions:",
        "toggle_comment": "actions.key(\"ctrl-q\")\n\n\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "line_clone": "actions.key(\"ctrl-d\")",
        "line_swap_up": "actions.key(\"ctrl-shift-up\")",
        "line_swap_down": "actions.key(\"ctrl-shift-down\")",
        "indent_more": "actions.key(\"tab\")",
        "indent_less": "actions.key(\"shift-tab\")",
        "jump_line": "actions.key(\"ctrl-g\")\n        actions.insert(str(n))\n        actions.key(\"enter\")",
        "find": "actions.key(\"ctrl-f\")\n\n        if text:\n            actions.insert(text)",
        "filename": "title = actions.win.title()\n        result = title.split(\" - \")[0]\n        if \".\" in result:\n            # print(result.split(\"\\\\\")[-1])\n            return result.split(\"\\\\\")[-1]\n        return \"\"\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "select_next_occurrence": "actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"enter esc\")\n        actions.sleep(\"100ms\")",
        "select_previous_occurrence": "actions.edit.find(text)\n        actions.sleep(\"100ms\")\n        actions.key(\"shift-enter esc\")\n        actions.sleep(\"100ms\")",
        "tab_jump": "if number < 10:\n            actions.key(f\"ctrl-keypad_{number}\")",
        "tab_final": "print(\"Notepad doesn't support this...\")\n        # actions.key(\"ctrl-numpad_0\")\n\n    # find_and_replace.py support begin",
        "find_next": "actions.key(\"enter\")",
        "find_previous": "actions.key(\"shift-enter\")",
        "find_everywhere": "actions.key(\"ctrl-shift-f\")\n\n        if text:\n            actions.insert(text)",
        "find_toggle_match_by_case": "actions.key(\"alt-c\")",
        "find_toggle_match_by_word": "actions.key(\"alt-w\")",
        "find_toggle_match_by_regex": "actions.key(\"alt-g\")",
        "replace": "actions.key(\"esc ctrl-h\")\n\n        if text:\n            actions.insert(text)",
        "replace_everywhere": "actions.key(\"esc ctrl-shift-f\")\n\n        if text:\n            actions.insert(text)",
        "replace_confirm": "actions.key(\"alt-r\")",
        "replace_confirm_all": "actions.key(\"alt-a\")\n\n    # find_and_replace.py support end"
    },
    "tag: i3wm": {},
    "app: windows_explorer": {
        "file_manager_go_back": "actions.key(\"alt-left\")",
        "file_manager_go_forward": "actions.key(\"alt-right\")",
        "file_manager_open_parent": "actions.key(\"alt-up\")",
        "file_manager_current_path": "path = ui.active_window().title\n\n        if path in directories_to_remap:\n            path = directories_to_remap[path]\n\n        if path in directories_to_exclude:\n            actions.user.file_manager_hide_pickers()\n            path = \"\"\n\n        return path",
        "file_manager_terminal_here": "actions.key(\"ctrl-l\")\n        actions.insert(\"cmd.exe\")\n        actions.key(\"enter\")",
        "file_manager_show_properties": "actions.key(\"alt-enter\")",
        "file_manager_open_directory": "actions.key(\"ctrl-l\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_directory": "actions.insert(path)",
        "file_manager_new_folder": "actions.key(\"home\")\n        actions.key(\"ctrl-shift-n\")\n        actions.insert(name)",
        "file_manager_open_file": "actions.key(\"home\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_file": "actions.key(\"home\")\n        actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)"
    },
    "app: windows_file_browser": {
        "file_manager_go_back": "actions.key(\"alt-left\")",
        "file_manager_go_forward": "actions.key(\"alt-right\")",
        "file_manager_open_parent": "actions.key(\"alt-up\")",
        "file_manager_current_path": "path = ui.active_window().title\n\n        if path in directories_to_remap:\n            path = directories_to_remap[path]\n\n        if path in directories_to_exclude:\n            actions.user.file_manager_hide_pickers()\n            path = \"\"\n\n        return path",
        "file_manager_terminal_here": "actions.key(\"ctrl-l\")\n        actions.insert(\"cmd.exe\")\n        actions.key(\"enter\")",
        "file_manager_show_properties": "actions.key(\"alt-enter\")",
        "file_manager_open_directory": "actions.key(\"ctrl-l\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_directory": "actions.insert(path)",
        "file_manager_new_folder": "actions.key(\"home\")\n        actions.key(\"ctrl-shift-n\")\n        actions.insert(name)",
        "file_manager_open_file": "actions.key(\"home\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_file": "actions.key(\"home\")\n        actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)"
    },
    "tag: windbg": {},
    "app: terminator": {
        "split_window_right": "actions.key(\"alt-right\")",
        "split_window_left": "actions.key(\"alt-left\")",
        "split_window_down": "actions.key(\"alt-down\")",
        "split_window_up": "actions.key(\"alt-up\")",
        "split_window_vertically": "actions.key(\"shift-ctrl-e\")",
        "split_window_horizontally": "actions.key(\"shift-ctrl-o\")",
        "split_flip": "actions.key(\"super-r\")",
        "split_maximize": "actions.key(\"shift-ctrl-x\")",
        "split_reset": "actions.key(\"shift-ctrl-x\")",
        "split_window": "actions.key(\"shift-ctrl-o\")",
        "split_clear": "actions.key(\"shift-ctrl-r\")",
        "split_clear_all": "actions.key(\"shift-ctrl-g\")",
        "split_next": "actions.key(\"shift-ctrl-n\")",
        "split_last": "actions.key(\"shift-ctrl-p\")\n\n\n@ctx.action_class(\"app\")\nclass AppActions:\n    # app.tabs",
        "tab_open": "actions.key(\"ctrl-shift-t\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")",
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_close": "actions.key(\"ctrl-shift-w\")\n\n    # global (overwrite linux/app.py)",
        "window_open": "actions.key(\"ctrl-shift-i\")",
        "window_close": "actions.key(\"ctrl-shift-q\")\n\n\n# global (overwrite linux/edit.py)\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "page_down": "actions.key(\"shift-pagedown\")",
        "page_up": "actions.key(\"shift-pageup\")",
        "paste": "actions.key(\"ctrl-shift-v\")",
        "copy": "actions.key(\"ctrl-shift-c\")",
        "find": "actions.key(\"ctrl-shift-f\")\n        if text:\n            actions.insert(text)",
        "delete_line": "actions.edit.line_start()\n        actions.key(\"ctrl-k\")"
    },
    "app: evince": {
        "page_current": "actions.key(\"ctrl-l\")\n        page = actions.edit.selected_text()\n        actions.key(\"escape\")\n        return int(page)",
        "page_next": "actions.key(\"n\")",
        "page_previous": "actions.key(\"p\")",
        "page_jump": "actions.key(\"ctrl-l\")\n        actions.insert(str(number))\n        actions.key(\"enter\")",
        "page_final": "actions.key(\"ctrl-end\")"
    },
    "app: microsoft_edge": {
        "show_extensions": "actions.app.tab_open()\n        actions.browser.go(\"edge://extensions\")"
    },
    "app: brave": {
        "tab_close_wrapper": "actions.sleep(\"180ms\")\n        actions.app.tab_close()\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "show_extensions": "actions.app.tab_open()\n        actions.browser.go(\"brave://extensions\")"
    },
    "app: jetbrains": {
        "_get_nonce": "file_name = file_prefix + str(port)\n    try:\n        with open(os.path.join(tempfile.gettempdir(), file_name)) as fh:\n            return fh.read()\n    except FileNotFoundError as e:\n        try:\n            home = str(Path.home())\n            with open(os.path.join(home, file_name)) as fh:\n                return fh.read()\n        except FileNotFoundError as eb:\n            print(f\"Could not find {file_name} in tmp or home\")\n            return None\n    except OSError as e:\n        print(e)\n        return None",
        "send_idea_command": "print(f\"Sending {cmd}\")\n    active_app = ui.active_app()\n    bundle = active_app.bundle or active_app.name\n    port = port_mapping.get(bundle, None)\n    nonce = _get_nonce(port, \".vcidea_\") or _get_nonce(port, \"vcidea_\")\n    proxies = {\"http\": None, \"https\": None}\n    print(f\"sending {bundle} {port} {nonce}\")\n    if port and nonce:\n        response = requests.get(\n            f\"http://localhost:{port}/{nonce}/{cmd}\",\n            proxies=proxies,\n            timeout=(0.05, 3.05),\n        )\n        response.raise_for_status()\n        return response.text",
        "get_idea_location": "return send_idea_command(\"location\").split()",
        "idea_commands": "command_list = commands.split(\",\")\n    print(\"executing jetbrains\", commands)\n    global extendCommands\n    extendCommands = command_list\n    for cmd in command_list:\n        if cmd:\n            send_idea_command(cmd.strip())\n            time.sleep(0.1)\n\n\nctx = Context()\nmod = Module()\n\nmod.apps.jetbrains = \"app.name: /jetbrains/\"\nmod.apps.jetbrains = \"app.name: CLion\"\nmod.apps.jetbrains = \"app.name: IntelliJ IDEA\"\nmod.apps.jetbrains = \"app.name: PyCharm\"\nmod.apps.jetbrains = \"app.name: WebStorm\"\nmod.apps.jetbrains = \"app.name: RubyMine\"\nmod.apps.jetbrains = \"app.name: RubyMine-EAP\"\nmod.apps.jetbrains = \"app.name: DataGrip\"\nmod.apps.jetbrains = \n# windows\nmod.apps.jetbrains = \"app.exe: idea64.exe\"\nmod.apps.jetbrains = \"app.exe: PyCharm64.exe\"\nmod.apps.jetbrains = \"app.exe: pycharm64.exe\"\nmod.apps.jetbrains = \"app.exe: webstorm64.exe\"\nmod.apps.jetbrains = \nmod.apps.jetbrains = \n\n\n@mod.action_class\nclass Actions:",
        "idea": "idea_commands(commands)",
        "idea_grab": "old_clip = clip.get()\n        try:\n            original_line, original_column = get_idea_location()\n            for _ in range(times):\n                send_idea_command(\"action EditorSelectWord\")\n            send_idea_command(\"action EditorCopy\")\n            send_idea_command(f\"goto {original_line} {original_column}\")\n            send_idea_command(\"action EditorPaste\")\n        finally:\n            clip.set(old_clip)\n            global extendCommands\n            extendCommands = []\n\n\nctx.matches = r\n\n\n@ctx.action_class(\"app\")\nclass AppActions:",
        "tab_next": "actions.user.idea(\"action NextTab\")",
        "tab_previous": "actions.user.idea(\"action PreviousTab\")",
        "tab_close": "actions.user.idea(\"action CloseContent\")",
        "tab_reopen": "actions.user.idea(\"action ReopenClosedTab\")\n\n\n@ctx.action_class(\"code\")\nclass CodeActions:\n    # talon code actions",
        "toggle_comment": "actions.user.idea(\"action CommentByLineComment\")\n\n\n@ctx.action_class(\"edit\")\nclass EditActions:\n    # talon edit actions",
        "copy": "actions.user.idea(\"action EditorCopy\")",
        "cut": "actions.user.idea(\"action EditorCut\")",
        "delete": "actions.user.idea(\"action EditorBackSpace\")",
        "paste": "actions.user.idea(\"action EditorPaste\")",
        "find_next": "actions.user.idea(\"action FindNext\")",
        "find_previous": "actions.user.idea(\"action FindPrevious\")",
        "find": "actions.user.idea(\"action Find\")",
        "line_clone": "actions.user.idea(f\"clone {line}\")\n\n    # multi-cursor tag functions",
        "line_swap_down": "actions.user.idea(\"action MoveLineDown\")",
        "line_swap_up": "actions.user.idea(\"action MoveLineUp\")",
        "indent_more": "actions.user.idea(\"action EditorIndentLineOrSelection\")",
        "indent_less": "actions.user.idea(\"action EditorUnindentSelection\")",
        "select_line": "actions.user.idea(\"action EditorSelectLine\")",
        "select_word": "actions.user.idea(\"action EditorSelectWord\")",
        "select_all": "actions.user.idea(\"action $SelectAll\")",
        "file_start": "actions.user.idea(\"action EditorTextStart\")",
        "file_end": "actions.user.idea(\"action EditorTextEnd\")",
        "extend_file_start": "actions.user.idea(\"action EditorTextStartWithSelection\")",
        "extend_file_end": "actions.user.idea(\"action EditorTextEndWithSelection\")",
        "extend_word_left": "actions.user.idea(\"action EditorPreviousWordWithSelection\")",
        "extend_word_right": "actions.user.idea(\"action EditorNextWordWithSelection\")",
        "jump_line": "actions.user.idea(f\"goto {n} 0\")\n        # move the cursor to the first nonwhite space character of the line\n        actions.user.idea(\"action EditorLineEnd\")\n        actions.user.idea(\"action EditorLineStart\")\n\n\n@ctx.action_class(\"win\")\nclass WinActions:",
        "tab_jump": "# depends on plugin GoToTabs\n        if number < 10:\n            actions.user.idea(f\"action GoToTab{number}\")",
        "extend_until_line": "actions.user.idea(f\"extend {line}\")",
        "select_range": "# if it's a single line, select the entire thing including the ending new-line5\n        if line_start == line_end:\n            actions.user.idea(f\"goto {line_start} 0\")\n            actions.user.idea(\"action EditorSelectLine\"),\n        else:\n            actions.user.idea(f\"range {line_start} {line_end}\")",
        "extend_camel_left": "actions.user.idea(\"action EditorPreviousWordInDifferentHumpsModeWithSelection\")",
        "extend_camel_right": "actions.user.idea(\"action EditorNextWordInDifferentHumpsModeWithSelection\")",
        "camel_left": "actions.user.idea(\"action EditorPreviousWordInDifferentHumpsMode\")",
        "camel_right": "actions.user.idea(\"action EditorNextWordInDifferentHumpsMode\")",
        "multi_cursor_enable": "actions.skip()",
        "multi_cursor_disable": "actions.key(\"escape\")",
        "multi_cursor_add_above": "actions.user.idea(\"action EditorCloneCaretAbove\")",
        "multi_cursor_add_below": "actions.user.idea(\"action EditorCloneCaretBelow\")",
        "multi_cursor_select_fewer_occurrences": "actions.user.idea(\"action UnselectPreviousOccurrence\")",
        "multi_cursor_select_more_occurrences": "actions.user.idea(\"action SelectNextOccurrence\")\n\n    #",
        "multi_cursor_select_all_occurrences": "actions.user.idea(\"action SelectAllOccurrences\")",
        "multi_cursor_add_to_line_ends": "actions.user.idea(\"action EditorAddCaretPerSelectedLine\")\n\n    # splits tag functions\n    #",
        "split_window_right": "#     actions.user.idea(\"action OpenInRightSplit\")\n    #",
        "split_window_left": "#",
        "split_window_down": "#",
        "split_window_vertically": "actions.user.idea(\"action SplitVertically\")",
        "split_window_horizontally": "actions.user.idea(\"action SplitHorizontally\")",
        "split_flip": "actions.user.idea(\"action ChangeSplitOrientation\")",
        "split_maximize": "actions.key(\"ctrl-shift-f12\")",
        "split_reset": "actions.key(\"shift-f12\")\n\n    #",
        "split_clear": "actions.user.idea(\"action Unsplit\")",
        "split_clear_all": "actions.user.idea(\"action UnsplitAll\")",
        "split_next": "actions.user.idea(\"action NextSplitter\")\n\n    #",
        "split_last": "#"
    },
    "app: windows_power_shell": {
        "delete_line": "actions.key(\"esc\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "file_manager_refresh_title": "actions.insert(\n            \"$Host.UI.RawUI.WindowTitle = 'Windows PowerShell: ' +  $(get-location)\"\n        )\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")",
        "file_manager_open_parent": "actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_current_path": "path = ui.active_window().title\n        path = path.replace(\"Administrator:  \", \"\").replace(\"Windows PowerShell: \", \"\")\n\n        if path in directories_to_remap:\n            path = directories_to_remap[path]\n\n        if path in directories_to_exclude:\n            path = \"\"\n        return path",
        "file_manager_open_directory": "actions.insert(f'cd \"{path}\"')\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_select_directory": "actions.insert(f'\"{path}\"')",
        "file_manager_new_folder": "actions.insert(f'mkdir \"{name}\"')",
        "file_manager_open_file": "actions.insert(path)\n        # actions.key(\"enter\")",
        "file_manager_select_file": "actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)"
    },
    "app: notes": {
        "zoom_in": "actions.key(\"shift-cmd->\")",
        "zoom_out": "actions.key(\"shift-cmd-<\")",
        "zoom_reset": "actions.key(\"shift-cmd-0\")",
        "indent_less": "actions.key(\"cmd-[\")"
    },
    "app: windows_command_processor": {
        "delete_line": "actions.key(\"esc\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "file_manager_refresh_title": "actions.insert(\"title Command Prompt: %CD%\")\n        actions.key(\"enter\")\n        # action(user.file_manager_go_back):\n        #    key(\"alt-left\")\n        # action(user.file_manager_go_forward):\n        #    key(\"alt-right\")",
        "file_manager_open_parent": "actions.insert(\"cd ..\")\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_current_path": "path = ui.active_window().title\n        path = path.replace(\"Administrator:  \", \"\").replace(\"Command Prompt: \", \"\")\n        if path in directories_to_remap:\n            path = directories_to_remap[path]\n\n        if path in directories_to_exclude:\n            path = \"\"\n        return path\n\n    #",
        "file_manager_terminal_here": "#     actions.key(\"ctrl-l\")\n    #     actions.insert(\"cmd.exe\")\n    #     actions.key(\"enter\")\n\n    #",
        "file_manager_show_properties": "#     \n    #     actions.key(\"alt-enter\")",
        "file_manager_open_directory": "actions.insert(f'cd \"{path}\"')\n        actions.key(\"enter\")\n        actions.user.file_manager_refresh_title()",
        "file_manager_select_directory": "actions.insert(f'\"{path}\"')",
        "file_manager_new_folder": "actions.insert(f'mkdir \"{name}\"')",
        "file_manager_open_file": "actions.insert(path)\n        # actions.key(\"enter\")",
        "file_manager_select_file": "actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)",
        "terminal_list_directories": "actions.insert(\"dir\")\n        actions.key(\"enter\")",
        "terminal_list_all_directories": "actions.insert(\"dir /a\")\n        actions.key(\"enter\")",
        "terminal_change_directory": "actions.insert(f\"cd {path}\")\n        # if path:\n        # actions.key(\"enter\")",
        "terminal_change_directory_root": "actions.insert(\"cd /\")\n        actions.key(\"enter\")",
        "terminal_clear_screen": "actions.insert(\"cls\")\n        actions.key(\"enter\")",
        "terminal_run_last": "actions.key(\"up enter\")",
        "terminal_kill_all": "actions.key(\"ctrl-c\")\n        actions.insert(\"y\")\n        actions.key(\"enter\")"
    },
    "app: safari": {
        "browser_open_address_in_new_tab": "actions.key(\"cmd-enter\")\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "bookmark_tabs": "raise NotImplementedError(\n            \"Safari doesn't have a",
        "show_clear_cache": "raise NotImplementedError(\"Safari doesn't support this functionality\")",
        "reload_hard": "actions.key(\"cmd-alt-r\")",
        "show_downloads": "actions.key(\"cmd-alt-l\")",
        "show_extensions": "actions.key(\"cmd-, tab:8 space\")"
    },
    "app: gnome_terminal": {
        "tab_jump": "actions.key(f\"alt-{number}\")\n\n\n@ctx.action_class(\"app\")\nclass app_actions:\n    # app.tabs",
        "tab_open": "actions.key(\"ctrl-shift-t\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")",
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_close": "actions.key(\"ctrl-shift-w\")\n\n    # global (overwrite linux/app.py)",
        "window_open": "actions.key(\"ctrl-shift-n\")",
        "window_close": "actions.key(\"ctrl-shift-q\")\n\n\n# global (overwrite linux/edit.py)\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "page_down": "actions.key(\"shift-pagedown\")",
        "page_up": "actions.key(\"shift-pageup\")",
        "paste": "actions.key(\"ctrl-shift-v\")",
        "copy": "actions.key(\"ctrl-shift-c\")",
        "find": "actions.key(\"ctrl-shift-f\")\n        if text:\n            actions.insert(text)",
        "delete_line": "actions.edit.line_start()\n        actions.key(\"ctrl-k\")\n\n    # afaik not possible in gnome-terminal",
        "extend_left": "pass",
        "extend_right": "pass",
        "extend_up": "pass",
        "extend_down": "pass",
        "extend_word_left": "pass",
        "extend_word_right": "pass"
    },
    "app: finder": {
        "file_manager_open_parent": "actions.key(\"cmd-up\")",
        "file_manager_go_forward": "actions.key(\"cmd-]\")",
        "file_manager_go_back": "actions.key(\"cmd-[\")",
        "file_manager_current_path": "title = ui.active_window().title\n\n        if \"~\" in title:\n            title = os.path.expanduser(title)\n\n        if title in directories_to_remap:\n            title = directories_to_remap[title]\n\n        if title in directories_to_exclude:\n            title = \"\"\n\n        return title",
        "file_manager_terminal_here": "applescript.run(\n            r\n        )",
        "file_manager_show_properties": "actions.key(\"cmd-i\")",
        "file_manager_open_directory": "actions.key(\"cmd-shift-g\")\n        actions.sleep(\"50ms\")\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_directory": "actions.insert(path)",
        "file_manager_new_folder": "actions.key(\"cmd-shift-n\")\n        actions.insert(name)",
        "file_manager_open_file": "actions.key(\"home\")\n        actions.insert(path)\n        actions.key(\"cmd-o\")",
        "file_manager_select_file": "actions.key(\"home\")\n        actions.insert(path)"
    },
    "app: chrome": {
        "chrome_mod": "if app.platform == \"mac\":\n            actions.key(f\"cmd-{key}\")\n        else:\n            actions.key(f\"ctrl-{key}\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "tab_close_wrapper": "actions.sleep(\"180ms\")\n        actions.app.tab_close()\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "show_extensions": "actions.app.tab_open()\n        actions.browser.go(\"chrome://extensions\")"
    },
    "app: microsoft_teams": {
        "zoom_in": "actions.key(\"ctrl-=\")",
        "zoom_out": "actions.key(\"ctrl--\")",
        "zoom_reset": "actions.key(\"ctrl-0\")"
    },
    "tag: user.tmux": {
        "tmux_prefix": "actions.key(f\"ctrl-{setting_tmux_prefix_key.get()}\")",
        "tmux_keybind": "actions.user.tmux_prefix()\n        actions.key(key)",
        "tmux_enter_command": "actions.user.tmux_keybind(\":\")\n        actions.insert(command)",
        "tmux_execute_command": "actions.user.tmux_enter_command(command)\n        actions.key(\"enter\")\n        actions.sleep(\"100ms\")",
        "tmux_execute_command_with_confirmation": "actions.user.tmux_execute_command(\n            f'confirm-before -p \"{confirmation_prompt} (y/n)\" {command}'\n        )\n        actions.key(\"\\n\")\n\n\n@ctx.action_class(\"app\")\nclass AppActions:",
        "tab_open": "actions.user.tmux_execute_command(\"new-window\")",
        "tab_next": "actions.user.tmux_execute_command(\"select-window -n\")",
        "tab_previous": "actions.user.tmux_execute_command(\"select-window -p\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "tab_jump": "actions.user.tmux_execute_command(f\"select-window -t {number}\")",
        "tab_close_wrapper": "actions.user.tmux_execute_command_with_confirmation(\n            \"kill-window\", \"kill-window #W?\"\n        )",
        "split_window_right": "actions.user.split_window_horizontally()\n        actions.user.tmux_execute_command(\"swap-pane -U -s #P\")",
        "split_window_left": "actions.user.split_window_horizontally()",
        "split_window_down": "actions.user.split_window_vertically()\n        actions.user.tmux_execute_command(\"swap-pane -U -s #P\")",
        "split_window_up": "actions.user.split_window_vertically()",
        "split_flip": "actions.user.tmux_execute_command(\"next-layout\")",
        "split_window_vertically": "actions.user.tmux_execute_command(\"split-pane\")",
        "split_window_horizontally": "actions.user.tmux_execute_command(\"split-pane -h\")",
        "split_maximize": "# toggle the maximization because zooming when already zoomed is pointless\n        actions.user.tmux_execute_command(\"resize-pane -Z\")",
        "split_reset": "actions.user.tmux_execute_command(\"resize-pane -Z\")",
        "split_window": "actions.user.split_window_horizontally()",
        "split_clear": "actions.user.tmux_execute_command_with_confirmation(\n            \"kill-pane\", \"kill-pane #P?\"\n        )",
        "split_next": "# select-pane doesn't seem to support the prefix-o behavior\n        actions.user.tmux_keybind(\"o\")",
        "split_last": "actions.user.tmux_execute_command(\"select-pane -l\")",
        "split_number": "actions.user.tmux_execute_command(f\"select-pane -t {index}\")"
    },
    "app: opera": {
        "tab_duplicate": "actions.browser.focus_address()\n        actions.sleep(\"180ms\")\n        possibly_edited_url = actions.edit.selected_text()\n        actions.key(\"esc:2\")\n        actions.browser.focus_address()\n        actions.sleep(\"180ms\")\n        url_address = actions.edit.selected_text()\n        actions.user.paste(possibly_edited_url)\n        actions.app.tab_open()\n        actions.user.paste(url_address)\n        actions.key(\"enter\")",
        "tab_jump": "if number < 9:\n            actions.key(f\"ctrl-{number}\")",
        "tab_final": "raise NotImplementedError(\n            \"Opera doesn't have a",
        "tab_close_wrapper": "actions.sleep(\"180ms\")\n        actions.app.tab_close()\n\n\n@ctx.action_class(\"app\")\nclass AppActions:",
        "tab_next": "actions.key(\"ctrl-pagedown\")",
        "tab_previous": "actions.key(\"ctrl-pageup\")\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "bookmarks_bar": "raise NotImplementedError(\n            \"Opera doesn't have a",
        "bookmark_tabs": "raise NotImplementedError(\"Opera doesn't support this functionality\")",
        "go_home": "raise NotImplementedError(\"Opera doesn't support this functionality\")",
        "go_back": "actions.browser.focus_page()\n        actions.next()",
        "go_forward": "actions.browser.focus_page()\n        actions.next()",
        "bookmarks": "actions.key(\"ctrl-shift-b\")",
        "show_downloads": "actions.key(\"ctrl-j\")",
        "show_extensions": "actions.key(\"ctrl-shift-e\")",
        "focus_page": "actions.key(\"f9\")",
        "reload_hard": "actions.key(\"shift-5\")"
    },
    "app: slack": {
        "line_insert_down": "actions.edit.line_end()\n        actions.key(\"shift-enter\")"
    },
    "app: mintty": {
        "get_win_path": "path = \"\"\n    try:\n        path = (\n            subprocess.check_output([setting_cyg_path.get(), \"-w\", cyg_path])\n            .strip(b\"\\n\")\n            .decode()\n        )\n    except:\n        path = \"\"\n    return path\n\n\n@ctx.action_class(\"edit\")\nclass EditActions:",
        "paste": "actions.key(\"shift-insert\")",
        "copy": "actions.key(\"ctrl-insert\")",
        "delete_line": "actions.key(\"ctrl-u\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "file_manager_open_parent": "actions.insert(\"cd ..\")\n        actions.key(\"enter\")",
        "file_manager_current_path": "path = ui.active_window().title\n        path = get_win_path(path)\n\n        if path in directories_to_remap:\n            path = directories_to_remap[title]\n\n        if path in directories_to_exclude:\n            path = \"\"\n        return path",
        "file_manager_open_directory": "actions.insert(\"cd \")\n        path = f'\"{path}\"'\n        actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_directory": "actions.insert(path)",
        "file_manager_new_folder": "name = f'\"{name}\"'\n\n        actions.insert(\"mkdir \" + name)",
        "file_manager_open_file": "actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_file": "actions.insert(path)",
        "file_manager_open_volume": "actions.user.file_manager_open_directory(volume)",
        "terminal_list_directories": "actions.insert(\"ls\")\n        actions.key(\"enter\")",
        "terminal_list_all_directories": "actions.insert(\"ls -a\")\n        actions.key(\"enter\")",
        "terminal_change_directory": "actions.insert(f\"cd {path}\")\n        if path:\n            actions.key(\"enter\")",
        "terminal_change_directory_root": "actions.insert(\"cd /\")\n        actions.key(\"enter\")",
        "terminal_clear_screen": "actions.key(\"ctrl-l\")",
        "terminal_run_last": "actions.key(\"up enter\")",
        "terminal_kill_all": "actions.key(\"ctrl-c\")\n        actions.insert(\"y\")\n        actions.key(\"enter\")"
    },
    "app: apple_terminal": {
        "delete_line": "actions.key(\"ctrl-u\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "file_manager_current_path": "title = ui.active_window().title\n\n        # take the first split for the zsh-based terminal\n        if \" \u2014 \" in title:\n            title = title.split(\" \u2014 \")[0]\n\n        if \"~\" in title:\n            title = os.path.expanduser(title)\n\n        if title in directories_to_remap:\n            title = directories_to_remap[title]\n\n        if title in directories_to_exclude:\n            title = None\n\n        return title",
        "file_manager_open_directory": "actions.insert(\"cd \")\n        path = f'\"{path}\"'\n        actions.insert(path)\n        actions.key(\"enter\")\n\n        # jtk - refresh title isn't necessary since the apple terminal does it for us\n        # actions.user.file_manager_refresh_title()",
        "file_manager_open_parent": "actions.insert(\"cd ..\")\n        actions.key(\"enter\")",
        "file_manager_select_directory": "actions.insert(path)",
        "file_manager_new_folder": "name = f'\"{name}\"'\n\n        actions.insert(\"mkdir \" + name)",
        "file_manager_open_file": "actions.insert(path)\n        actions.key(\"enter\")",
        "file_manager_select_file": "actions.insert(path)",
        "file_manager_refresh_title": "return\n\n\n@ctx.action_class(\"app\")\nclass app_actions:\n    # other tab functions should already be implemented in\n    # code/platforms/mac/app.py",
        "tab_previous": "actions.key(\"ctrl-shift-tab\")",
        "tab_next": "actions.key(\"ctrl-tab\")"
    },
    "app: vivaldi": {
        "vivaldi_history_panel": "actions.key(\"cmd-alt-y\")",
        "vivaldi_downloads_panel": "actions.key(\"cmd-alt-l\")",
        "vivaldi_notes_panel": "# This shortcut didn't work for me. You might need to change it to a\n        # different one.\n        actions.key(\"cmd-alt-n\")",
        "vivaldi_toggle_quick_commands": "actions.key(\"cmd-e\")",
        "tab_jump": "actions.key(f\"cmd-{number}\")\n\n\n@ctx.action_class(\"app\")\nclass AppActions:",
        "tab_next": "actions.key(\"cmd-shift-]\")",
        "tab_previous": "actions.key(\"cmd-shift-[\")\n\n\n@ctx.action_class(\"browser\")\nclass BrowserActions:",
        "show_extensions": "actions.key(\"ctrl-cmd-e\")",
        "bookmarks": "actions.key(\"cmd-ctrl-b\")",
        "focus_address": "actions.key(\"cmd-l\")"
    },
    "tag: kubectl": {},
    "tag: user.kubectl": {},
    "app: vscode": {
        "update_list": "#     ctx.lists[\"user.snippets\"] = watch_list\n\n\n# # there's probably a way to do this without\n# snippet_path = None\n# if app.platform == \"windows\":\n#     snippet_path = os.path.expandvars(r\"%AppData%\\Code\\User\\snippets\")\n# elif app.platform == \"mac\":\n#     snippet_path = os.path.expanduser(\n#         \"~/Library/Application Support/Code/User/snippets\"\n#     )\n# if snippet_path:\n#     watcher2 = snippet_watcher({snippet_path: [\"csharp.json\",],}, update_list,)\n# print(\"reloaded!\")"
    },
    "tag: user.command_client": {
        "__repr__": "return \"<argument not set>\"\n\n\nclass NoFileServerException(Exception):\n    pass",
        "write_json_exclusive": "with path.open(\"x\") as out_file:\n        out_file.write(json.dumps(body))\n\n\n@dataclass\nclass Request:\n    command_id: str\n    args: list[Any]\n    wait_for_finish: bool\n    return_command_output: bool\n    uuid: str",
        "to_dict": "return {\n            \"commandId\": self.command_id,\n            \"args\": self.args,\n            \"waitForFinish\": self.wait_for_finish,\n            \"returnCommandOutput\": self.return_command_output,\n            \"uuid\": self.uuid,\n        }",
        "write_request": "try:\n        write_json_exclusive(path, request.to_dict())\n        request_file_exists = False\n    except FileExistsError:\n        request_file_exists = True\n\n    if request_file_exists:\n        handle_existing_request_file(path)\n        write_json_exclusive(path, request.to_dict())",
        "handle_existing_request_file": "stats = path.stat()\n\n    modified_time_ms = stats.st_mtime_ns / 1e6\n    current_time_ms = time.time() * 1e3\n    time_difference_ms = abs(modified_time_ms - current_time_ms)\n\n    if time_difference_ms < STALE_TIMEOUT_MS:\n        raise Exception(\n            \"Found recent request file; another Talon process is probably running\"\n        )\n\n    print(\"Removing stale request file\")\n    robust_unlink(path)",
        "run_command": "# NB: This is a hack to work around the fact that talon doesn't support\n    # variable argument lists\n    args = [x for x in args if x is not NotSet]\n\n    communication_dir_path = get_communication_dir_path()\n\n    if not communication_dir_path.exists():\n        if args or return_command_output:\n            raise Exception(\"Must use command-server extension for advanced commands\")\n        raise NoFileServerException(\"Communication directory not found\")\n\n    request_path = communication_dir_path / \"request.json\"\n    response_path = communication_dir_path / \"response.json\"\n\n    # Generate uuid that will be mirrored back to us by command server for\n    # sanity checking\n    uuid = str(uuid4())\n\n    request = Request(\n        command_id=command_id,\n        args=args,\n        wait_for_finish=wait_for_finish,\n        return_command_output=return_command_output,\n        uuid=uuid,\n    )\n\n    # First, write the request to the request file, which makes us the sole\n    # owner because all other processes will try to open it with 'x'\n    write_request(request, request_path)\n\n    # We clear the response file if it does exist, though it shouldn't\n    if response_path.exists():\n        print(\"WARNING: Found old response file\")\n        robust_unlink(response_path)\n\n    # Then, perform keystroke telling application to execute the command in the\n    # request file.  Because only the active application instance will accept\n    # keypresses, we can be sure that the active application instance will be the\n    # one to execute the command.\n    actions.user.trigger_command_server_command_execution()\n\n    try:\n        decoded_contents = read_json_with_timeout(response_path)\n    finally:\n        # NB: We remove response file first because we want to do this while we\n        # still own the request file\n        robust_unlink(response_path)\n        robust_unlink(request_path)\n\n    if decoded_contents[\"uuid\"] != uuid:\n        raise Exception(\"uuids did not match\")\n\n    for warning in decoded_contents[\"warnings\"]:\n        print(f\"WARNING: {warning}\")\n\n    if decoded_contents[\"error\"] is not None:\n        raise Exception(decoded_contents[\"error\"])\n\n    actions.sleep(\"25ms\")\n\n    return decoded_contents[\"returnValue\"]",
        "get_communication_dir_path": "suffix = \"\"\n\n    # NB: We don't suffix on Windows, because the temp dir is user-specific\n    # anyways\n    if hasattr(os, \"getuid\"):\n        suffix = f\"-{os.getuid()}\"\n\n    return Path(gettempdir()) / f\"{actions.user.command_server_directory()}{suffix}\"",
        "robust_unlink": "try:\n        path.unlink(missing_ok=True)\n    except OSError as e:\n        if hasattr(e, \"winerror\") and e.winerror == 32:\n            graveyard_dir = get_communication_dir_path() / \"graveyard\"\n            graveyard_dir.mkdir(parents=True, exist_ok=True)\n            graveyard_path = graveyard_dir / str(uuid4())\n            print(\n                f\"WARNING: File {path} was in use when we tried to delete it; \"\n                f\"moving to graveyard at path {graveyard_path}\"\n            )\n            path.rename(graveyard_path)\n        else:\n            raise e",
        "run_rpc_command": "run_command(\n            command_id,\n            arg1,\n            arg2,\n            arg3,\n            arg4,\n            arg5,\n        )",
        "run_rpc_command_and_wait": "run_command(\n            command_id,\n            arg1,\n            arg2,\n            arg3,\n            arg4,\n            arg5,\n            wait_for_finish=True,\n        )",
        "trigger_command_server_command_execution": "actions.key(\"cmd-shift-f17\")\n\n\n@ctx.action_class(\"user\")\nclass UserActions:",
        "emit_pre_phrase_signal": "get_signal_path(\"prePhrase\").touch()\n        return True\n\n\nclass MissingCommunicationDir(Exception):\n    pass",
        "pre_phrase": "try:\n        global did_emit_pre_phrase_signal\n\n        did_emit_pre_phrase_signal = actions.user.emit_pre_phrase_signal()\n    except MissingCommunicationDir:\n        pass",
        "post_phrase": "global did_emit_pre_phrase_signal\n    did_emit_pre_phrase_signal = False\n\n\nspeech_system.register(\"pre:phrase\", pre_phrase)\nspeech_system.register(\"post:phrase\", post_phrase)"
    },
    "app: thunderbird": {
        "tab_reopen": "actions.key(\"ctrl-shift-t\")  # only works from inbox tab\n\n\n@ctx.action_class(\"user\")\nclass UserActions:\n    # user.tabs",
        "tab_jump": "if number <= 9:\n            actions.key(f\"ctrl-{number}\")",
        "tab_final": "actions.key(\"ctrl-9\")\n\n    # custom actions",
        "thunderbird_mod": "actions.key(f\"ctrl-{keys}\")",
        "thunderbird_calendar_view": "actions.key(f\"alt-{number}\")"
    }
}