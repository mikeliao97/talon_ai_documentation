"""
 This file is a set of commands for Talon voice software. The commands can be activated by stating the trigger phrase followed by the necessary parameters. 

The first set of commands is related to dictation. Users can activate specific key modifiers and keys by saying `mode: dictation` followed by the desired command. There are also various formatting options, such as capitalization and spacing, which can be accessed by saying the corresponding command.

For navigation, users can specify the direction and number of lines or words they want to move using commands like `go up <number_small> lines` or `go right <number_small> words`.

Commands are also provided for selecting and clearing text to the left or right of the cursor. For example, users can say `select left <number_small> words` or `clear right <number_small> characters`.

To format text, users can specify the desired format and insert the text by saying `formatted <user.format_text>`. They can also reformat the selection using a variety of formatters.

Correction commands are available for editing text, such as deleting the last phrase (`nope that`), spelling out a word (`spell that <user.letters>`), or selecting the last phrase (`select that`).

Finally, users can escape specific commands and type them out by saying `escape <user.text>`.
"""mode: dictation
^press <user.modifiers>$: key(modifiers)
^press <user.keys>$: key(keys)

# Everything here should call `user.dictation_insert()` instead of `insert()`, to correctly auto-capitalize/auto-space.
<user.raw_prose>: user.dictation_insert(raw_prose)
cap: user.dictation_format_cap()
# Hyphenated variants are for Dragon.
(no cap | no-caps): user.dictation_format_no_cap()
(no space | no-space): user.dictation_format_no_space()
^cap that$: user.dictation_reformat_cap()
^(no cap | no-caps) that$: user.dictation_reformat_no_cap()
^(no space | no-space) that$: user.dictation_reformat_no_space()

# Navigation
go up <number_small> (line | lines):
    edit.up()
    repeat(number_small - 1)
go down <number_small> (line | lines):
    edit.down()
    repeat(number_small - 1)
go left <number_small> (word | words):
    edit.word_left()
    repeat(number_small - 1)
go right <number_small> (word | words):
    edit.word_right()
    repeat(number_small - 1)
go line start: edit.line_start()
go line end: edit.line_end()

# Selection
select left <number_small> (word | words):
    edit.extend_word_left()
    repeat(number_small - 1)
select right <number_small> (word | words):
    edit.extend_word_right()
    repeat(number_small - 1)
select left <number_small> (character | characters):
    edit.extend_left()
    repeat(number_small - 1)
select right <number_small> (character | characters):
    edit.extend_right()
    repeat(number_small - 1)
clear left <number_small> (word | words):
    edit.extend_word_left()
    repeat(number_small - 1)
    edit.delete()
clear right <number_small> (word | words):
    edit.extend_word_right()
    repeat(number_small - 1)
    edit.delete()
clear left <number_small> (character | characters):
    edit.extend_left()
    repeat(number_small - 1)
    edit.delete()
clear right <number_small> (character | characters):
    edit.extend_right()
    repeat(number_small - 1)
    edit.delete()

# Formatting
formatted <user.format_text>: user.dictation_insert_raw(format_text)
^format selection <user.formatters>$: user.formatters_reformat_selection(formatters)

# Corrections
nope that | scratch that: user.clear_last_phrase()
(nope | scratch) selection: edit.delete()
select that: user.select_last_phrase()
spell that <user.letters>: user.dictation_insert(letters)
spell that <user.formatters> <user.letters>:
    result = user.formatted_text(letters, formatters)
    user.dictation_insert_raw(result)

# Escape, type things that would otherwise be commands
^escape <user.text>$: user.dictation_insert(user.text)
